{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/copycode.css","path":"css/copycode.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copyright.css","path":"css/copyright.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/path/my.jpeg","path":"path/my.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"feaa6fd82b62d2b28ba452bdbf7e8588a9149a49","modified":1612334860361},{"_id":"source/_posts/change.md","hash":"9d7a61b3e73959d0ed12db57bb5f898ce5bc38b2","modified":1612334860361},{"_id":"source/_posts/hello-world.md","hash":"5d83f1e58ed591ee62f1eda5cd75249d2500feaa","modified":1612338228114},{"_id":"source/_posts/themeSet.md","hash":"de101fd2265b3005461160551805c21f6094c8bd","modified":1614156956925},{"_id":"source/about/index.md","hash":"11fdd8e3c8540751f2b95a4a378b791fca25b764","modified":1614157593930},{"_id":"themes/maupassant/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1611761661337},{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1610704790995},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1610704790995},{"_id":"themes/maupassant/README.md","hash":"bf9b1076624b1b9ae1383e73a61dd1d17cef18ca","modified":1610712869104},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1610704790995},{"_id":"themes/maupassant/_config.yml","hash":"cf4e774a6321746c10f88ada250c511b86173773","modified":1610715406574},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1610704791001},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1610704790996},{"_id":"themes/maupassant/languages/en.yml","hash":"9c979a2f107536399bbe2be572c2d0bebcdd9d95","modified":1610704790996},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1610704790996},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1610704790996},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1610704790996},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"78cc1794a3ce3e186c462c1a70f097d0c05cd210","modified":1610704790996},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1610704790996},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"e9747f9b3ec1314a3cae44a9a90e7649af739633","modified":1610704790996},{"_id":"themes/maupassant/layout/archive.pug","hash":"749028e57a2eaad8c92ce2a2426c98605ab746a7","modified":1610704790999},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"80995eadfd89ee9aa36f4672f8d405e03f13af15","modified":1610704790999},{"_id":"themes/maupassant/layout/base.pug","hash":"a226db456b92c9e8611a8bfda07818e6c3d13dd5","modified":1610704791000},{"_id":"themes/maupassant/layout/index.pug","hash":"162fe3fa695e8bea5a77916aefbb7ce98cd227bf","modified":1610704791000},{"_id":"themes/maupassant/layout/page.pug","hash":"a285a76950bb1b91f482ef9c473472bd0ede601d","modified":1610704791000},{"_id":"themes/maupassant/layout/post.pug","hash":"c0113056cbcfbba79867835ba364a37d9ccd3cfb","modified":1610704791000},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1610704791000},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1610704791000},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"4aa57b41e919a12b6d7691cd4a36d3a531b55fcb","modified":1610704791000},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"5d6c0e323caffacfef50b0394e2fc0c277c77f52","modified":1610704790997},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"aefb67bac8fcef9cb3027f8622923b392f79f51e","modified":1610704790997},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1610704790997},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"51881cde4653f00e9d0de68fb9c201b52b100b9e","modified":1610704790997},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1610704790997},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1610704790997},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1610704790997},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1610704790998},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1610704790998},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"53d721ea4c93564cb0bdde065572ff6128574d36","modified":1610704790998},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1610704790998},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"b3c846a2e0ac79933e32c343029b769f2865a27f","modified":1610704790998},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1610704790998},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"32701dcba9c52d4bc73badaf8afe91af3f87b6a0","modified":1610704790998},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1610704790999},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"50855ce17af4298ce0f15236e2308c4a1760e7e3","modified":1610704790999},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"f009d821cd620c4aab772a64e74919ea87f8b0a3","modified":1610712825162},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1610704790999},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1610704790999},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1610704790999},{"_id":"themes/maupassant/source/css/copycode.css","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1610704791001},{"_id":"themes/maupassant/source/css/dark.css","hash":"0faf42a84e243032b736c5f06ddbb95ac69e779c","modified":1610704791001},{"_id":"themes/maupassant/source/css/donate.css","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1610704791001},{"_id":"themes/maupassant/source/css/search.css","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1610704791001},{"_id":"themes/maupassant/source/css/copyright.css","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1610704791001},{"_id":"themes/maupassant/source/css/style.scss","hash":"2435d3536b35a259e3eaca850292c1aa48cc8673","modified":1610704791002},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1610704791002},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1610704791002},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1610704791002},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1610704791003},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1610704791003},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1610704791003},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1610704791003},{"_id":"themes/maupassant/source/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1610704791003},{"_id":"themes/maupassant/source/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1610704791004},{"_id":"themes/maupassant/source/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1610704791004},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"37fc9b97c75e55fd4dbd325b784d3612d51336cb","modified":1611745702128},{"_id":"themes/maupassant/source/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1610704791004},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1610704791004},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1610704791004},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1610704791005},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1610704791005},{"_id":"themes/maupassant/yarn.lock","hash":"a9303426ef73e7a0a2e00e030e18708c6767ae53","modified":1610713710493},{"_id":"public/about/index.html","hash":"088255e36a0eb709c8c0c91627b22f8ae1427c0a","modified":1615206299630},{"_id":"public/change/index.html","hash":"95e3cdfc629663621cbc230349368f255c21e99a","modified":1612337376242},{"_id":"public/hello-world/index.html","hash":"86f1a965f24f117ce2ce6f0313ad1d0d8409b201","modified":1612337376242},{"_id":"public/archives/index.html","hash":"278560b2ecb6cb98511e52dcc75dfee6ca3ba813","modified":1615206299630},{"_id":"public/archives/2021/index.html","hash":"0e146a3823998270e3c397d4ddb67188e503ad42","modified":1615206299630},{"_id":"public/archives/2021/02/index.html","hash":"ece32c8ef377b07ff4f14156ad2e80f67888178b","modified":1615206299630},{"_id":"public/themeSet/index.html","hash":"32bd2748590cd178e0468593c6157ba2790f82b6","modified":1612337376242},{"_id":"public/index.html","hash":"a400e5d1ac0314223b85daecfd9bceeab52dd804","modified":1615206299630},{"_id":"public/CNAME","hash":"feaa6fd82b62d2b28ba452bdbf7e8588a9149a49","modified":1612337376242},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1612337376242},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1612337376242},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1612337376242},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1612337376242},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1612337376242},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1612337376242},{"_id":"public/css/copycode.css","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1612337376242},{"_id":"public/css/dark.css","hash":"0faf42a84e243032b736c5f06ddbb95ac69e779c","modified":1612337376242},{"_id":"public/css/donate.css","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1612337376242},{"_id":"public/css/search.css","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1612337376242},{"_id":"public/css/copyright.css","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1612337376242},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1612337376242},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1612337376242},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1612337376242},{"_id":"public/js/fancybox.js","hash":"37fc9b97c75e55fd4dbd325b784d3612d51336cb","modified":1612337376242},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1612337376242},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1612337376242},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1612337376242},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1612337376242},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1612337376242},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1612337376242},{"_id":"public/css/style.css","hash":"b62c7a610e82d973f8363daabf77cdd878323fa2","modified":1612337376242},{"_id":"source/_posts/other.md","hash":"e38b993bd914ddb373f2ba45c84003ad9f05cbf6","modified":1613985370278},{"_id":"source/_posts/javaScript/js.md","hash":"f2531af3db70c5ca5a653290e0968c9d11468890","modified":1614169940715},{"_id":"source/_posts/hexo/hexoSet.md","hash":"9026ab5c834a5f43248addc86bc7df2c17e971e9","modified":1614170134372},{"_id":"source/_posts/hexo/markdownSet.md","hash":"71b484a9fca1bb0ccc24dfc4138c840c5c9be352","modified":1614158251472},{"_id":"source/_posts/hexo/themeSet.md","hash":"88c67b5f81eee470465c584931b341cda77e8532","modified":1614170467618},{"_id":"source/_posts/examples/js.html","hash":"a2c84d8a5cdb3d98ea3e5db9978796df6bea7154","modified":1614167482262},{"_id":"source/_posts/hexo/change.md","hash":"0b69a88926a83ea0e9185c2659b5d771b7f88963","modified":1614171254719},{"_id":"source/examples/js.html","hash":"f9555811e54dd03172fc1157387fdc93435abcbd","modified":1614848751308},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614168841568},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1614168841564},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1614168841564},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1614168841564},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1614168841564},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1614168841564},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1614168841564},{"_id":"themes/yilia/_config.yml","hash":"da4ced96e5286d1ab4a8b7f8b8b31f0c9395134c","modified":1615206540151},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1614168841564},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1614168841570},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1614168841581},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1614168841564},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1614168841565},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1614168841565},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1614168841565},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1614168841565},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1614168841565},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1614168841565},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1614168841569},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1614168841569},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1614168841569},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1614168841569},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1614168841569},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1614168841569},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1614168841569},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1614168841580},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1614168841581},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1614168841570},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1614168841578},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1614168841565},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1614168841565},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1614168841565},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1614168841566},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1614168841566},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1614168841566},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1614168841566},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1614168841566},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1614168841566},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1614168841566},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1614168841566},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1614168841566},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1614168841567},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1614168841567},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1614168841568},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1614168841569},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1614168841578},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1614168841578},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1614168841578},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1614168841579},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1614168841579},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1614168841579},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1614168841579},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1614168841579},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1614168841579},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1614168841570},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1614168841570},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1614168841570},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1614168841570},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1614168841570},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1614168841571},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1614168841571},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1614168841571},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1614168841571},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1614168841572},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1614168841573},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1614168841573},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1614168841573},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1614168841573},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1614168841574},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1614168841574},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1614168841574},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1614168841574},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1614168841574},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1614168841575},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1614168841575},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1614168841575},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1614168841575},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1614168841575},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1614168841575},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1614168841576},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1614168841576},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1614168841576},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1614168841576},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1614168841577},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1614168841577},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1614168841577},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1614168841577},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1614168841577},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1614168841577},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1614168841577},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1614168841577},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1614168841578},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1614168841578},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1614168841567},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1614168841567},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1614168841567},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1614168841567},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1614168841567},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1614168841567},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1614168841568},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1614168841568},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1614168841567},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1614168841567},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1614168841571},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1614168841572},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1614168841571},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1614168841572},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1614168841572},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1614168841572},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1614168841572},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1614168841573},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1614168841573},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1614168841574},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1614168841574},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1614168841574},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1614168841580},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1614168841581},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1614168841568},{"_id":"source/path/my.jpeg","hash":"59570ebfd280ef0fac08ee60bf548b31b9be442f","modified":1614171188431},{"_id":"source/examples/my.jpeg","hash":"59570ebfd280ef0fac08ee60bf548b31b9be442f","modified":1614171183342},{"_id":"public/content.json","hash":"f75b9a110f6e4b3c6bfc26f0b2ead507a14898f8","modified":1615206299630},{"_id":"public/examples/js.html","hash":"2520ab77a58072c55a8214171c13f0724334d3a3","modified":1614858512732},{"_id":"public/hexo/change/index.html","hash":"97775756dd26520013be7365e8d8fe1bad4e1792","modified":1615206299630},{"_id":"public/javaScript/js/index.html","hash":"d443d82bb0fd6f8fc58ecc91187190ca576ad1c9","modified":1615206299630},{"_id":"public/hexo/themeSet/index.html","hash":"d998f4224c5382d16d79601e3fc8ed210aa0e445","modified":1615206299630},{"_id":"public/hexo/hexoSet/index.html","hash":"0ac392664f88ea73ef2e92d908d8c814328939b5","modified":1615206299630},{"_id":"public/tags/hexo/index.html","hash":"49330f59153e70ca61d5e2f17839bbf738433b8d","modified":1615206299630},{"_id":"public/tags/js/index.html","hash":"3ede1c26f44f16894065aa7f1bf7c8b5aa71e05a","modified":1615206299630},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1614171414785},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1614171414785},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1614171414785},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1614171414785},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1614171414785},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1614171414785},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1614171414785},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1614171414785},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1614171414785},{"_id":"public/examples/my.jpeg","hash":"59570ebfd280ef0fac08ee60bf548b31b9be442f","modified":1614171414785},{"_id":"public/path/my.jpeg","hash":"59570ebfd280ef0fac08ee60bf548b31b9be442f","modified":1614171414785},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1614171414785},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1614171414785},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1614171414785},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1614171414785},{"_id":"source/examples/promise.js","hash":"7b5ff887ca7724c1c1896fab2eb7859d3c86aaae","modified":1614848551231},{"_id":"source/_posts/Promise/setClassPromise.md","hash":"7f4c02bd6c4d865241a507678039b46ac1aa73b9","modified":1615043389295},{"_id":"source/examples/thenPromise.js","hash":"8c0882d9f507e87a98835878ebefd9dcf6e6e2bd","modified":1614858274718},{"_id":"public/examples/promise.js","hash":"7b5ff887ca7724c1c1896fab2eb7859d3c86aaae","modified":1614858512732},{"_id":"public/examples/thenPromise.js","hash":"8c0882d9f507e87a98835878ebefd9dcf6e6e2bd","modified":1614858512732},{"_id":"public/Promise/setClassPromise/index.html","hash":"2730596125fe7db7ccefe62c73afdeda1880cb1e","modified":1615206299630},{"_id":"public/archives/2021/03/index.html","hash":"a83f4940cbb70e0140d6d5fedbef2dab16549237","modified":1615206299630},{"_id":"public/tags/promise/index.html","hash":"9702c51ee6d08688439dec1c174e62495e75d015","modified":1615206299630},{"_id":"source/examples/Promise/index.html","hash":"9ab92b50e279326e7c56158990d6f69f2e1fd294","modified":1615204437742},{"_id":"source/examples/JSMethods/index.html","hash":"f548d45017a197dc2f7abd0f38274828f3400def","modified":1614927662055},{"_id":"source/examples/Promise/thenPromise.js","hash":"4565c3e5a81f48711f163ad2d6a1953433042cf1","modified":1614934117429},{"_id":"source/examples/Promise/promiseMethods.js","hash":"bb5bb24f0370c31fc18e8cbae27dbaa62e45083d","modified":1615204738418},{"_id":"source/examples/JSMethods/method.js","hash":"6e1c99dbdac3d9d101ce838c5d1586201caf7bf5","modified":1614927682488},{"_id":"source/examples/Promise/promise.js","hash":"7b5ff887ca7724c1c1896fab2eb7859d3c86aaae","modified":1614927309721},{"_id":"source/examples/Promise/index.js","hash":"b021f07d76050101af534427749bc15081a2541b","modified":1614933702700},{"_id":"source/_posts/Promise/PromiseMethosd.md","hash":"22505446fdb404449a3977402e488ca52b10bfbf","modified":1615205605232},{"_id":"source/examples/Promise/Promise(1).js","hash":"b74f997e9d0b8b477eb60390cfb2345e7355f846","modified":1615044241796},{"_id":"source/examples/.DS_Store","hash":"bcf5842dff87e8f391a084d427dd6b5e331d3067","modified":1615044407738},{"_id":"source/tags/随笔/suibi1.md","hash":"f39c965ff90886347fa157b37f7da243ef11c40f","modified":1615206104236},{"_id":"source/tags/随笔/index.html","hash":"6f1c8e82a1a4e384520478e93409b9ea2463fd7e","modified":1615206143266},{"_id":"public/examples/JSMethods/method.js","hash":"6e1c99dbdac3d9d101ce838c5d1586201caf7bf5","modified":1615206299630},{"_id":"public/examples/Promise/index.js","hash":"b021f07d76050101af534427749bc15081a2541b","modified":1615206299630},{"_id":"public/examples/Promise/promise.js","hash":"7b5ff887ca7724c1c1896fab2eb7859d3c86aaae","modified":1615206299630},{"_id":"public/examples/Promise/thenPromise.js","hash":"4565c3e5a81f48711f163ad2d6a1953433042cf1","modified":1615206299630},{"_id":"public/examples/Promise/promiseMethods.js","hash":"bb5bb24f0370c31fc18e8cbae27dbaa62e45083d","modified":1615206299630},{"_id":"public/examples/Promise/Promise(1).js","hash":"6583f53629c4798dd46d4dd0aa9a6ec3b179ffa3","modified":1615206299630},{"_id":"public/examples/JSMethods/index.html","hash":"99d5b3f3c4395459505ff49f693f15e09aafab52","modified":1615206299630},{"_id":"public/examples/Promise/index.html","hash":"9a3cf91a9932ca2093bf6fecd08efe5561028934","modified":1615206299630},{"_id":"public/tags/随笔/index.html","hash":"71381459220ad70ddfd4c3257d0a6b598c289c41","modified":1615206299630},{"_id":"public/Promise/PromiseMethosd/index.html","hash":"a84260eff5fed9e32630fa485e63c130bf4e2583","modified":1615206299630}],"Category":[],"Data":[],"Page":[{"title":"关于～","_content":"\n本页面暂时不知道写什么～\n","source":"about/index.md","raw":"---\ntitle: 关于～\n---\n\n本页面暂时不知道写什么～\n","date":"2021-02-24T09:06:33.930Z","updated":"2021-02-24T09:06:33.930Z","path":"about/index.html","_id":"ckkp41m0u0000j29k66y80uiv","comments":1,"layout":"page","content":"<p>本页面暂时不知道写什么～</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本页面暂时不知道写什么～</p>\n"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        <h4>js工具函数</h4>\n    </div>\n    <script src=\"./method.js\"></script>\n</body>\n\n</html>","source":"examples/JSMethods/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        <h4>js工具函数</h4>\n    </div>\n    <script src=\"./method.js\"></script>\n</body>\n\n</html>","date":"2021-03-05T07:01:02.055Z","updated":"2021-03-05T07:01:02.055Z","path":"examples/JSMethods/index.html","title":"","comments":1,"layout":"page","_id":"cklxp6bzf0000s89k82ye3up3","content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        <h4>js工具函数</h4>\n    </div>\n    <script src=\"./method.js\"></script>\n</body>\n\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        <h4>js工具函数</h4>\n    </div>\n    <script src=\"./method.js\"></script>\n</body>\n\n</html>"},{"_content":"const arrayToCSV = function(arr, deli = \",\") {\n    return arr.map((v) => {\n        return v.map((x) => {\n            return `${x}`;\n        }).join(deli);\n    }).join(\",\");\n};\nconsole.log(arrayToCSV([\n    ['a', 'b'],\n    ['c', 'd']\n]));\nlet arrayToCSV = [\n    ['a', 'b'],\n    ['c', 'd']\n];\nlet an = arrayToCSV.map(v => {\n    return v.map(x => {\n        return `${x}`;\n    }).join(',')\n}).join(',')\nconsole.log(an)","source":"examples/JSMethods/method.js","raw":"const arrayToCSV = function(arr, deli = \",\") {\n    return arr.map((v) => {\n        return v.map((x) => {\n            return `${x}`;\n        }).join(deli);\n    }).join(\",\");\n};\nconsole.log(arrayToCSV([\n    ['a', 'b'],\n    ['c', 'd']\n]));\nlet arrayToCSV = [\n    ['a', 'b'],\n    ['c', 'd']\n];\nlet an = arrayToCSV.map(v => {\n    return v.map(x => {\n        return `${x}`;\n    }).join(',')\n}).join(',')\nconsole.log(an)","date":"2021-03-05T07:01:22.488Z","updated":"2021-03-05T07:01:22.488Z","path":"examples/JSMethods/method.js","layout":"false","title":"","comments":1,"_id":"cklxp6bzk0001s89kamsa2plh","content":"const arrayToCSV = function(arr, deli = \",\") {\n    return arr.map((v) => {\n        return v.map((x) => {\n            return `${x}`;\n        }).join(deli);\n    }).join(\",\");\n};\nconsole.log(arrayToCSV([\n    ['a', 'b'],\n    ['c', 'd']\n]));\nlet arrayToCSV = [\n    ['a', 'b'],\n    ['c', 'd']\n];\nlet an = arrayToCSV.map(v => {\n    return v.map(x => {\n        return `${x}`;\n    }).join(',')\n}).join(',')\nconsole.log(an)","site":{"data":{}},"excerpt":"","more":"const arrayToCSV = function(arr, deli = \",\") {\n    return arr.map((v) => {\n        return v.map((x) => {\n            return `${x}`;\n        }).join(deli);\n    }).join(\",\");\n};\nconsole.log(arrayToCSV([\n    ['a', 'b'],\n    ['c', 'd']\n]));\nlet arrayToCSV = [\n    ['a', 'b'],\n    ['c', 'd']\n];\nlet an = arrayToCSV.map(v => {\n    return v.map(x => {\n        return `${x}`;\n    }).join(',')\n}).join(',')\nconsole.log(an)"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        <h4>promise</h4>\n        <h4>实现new Promise().then</h4>\n        <h4>new Promise() 其他方法</h4>\n        <ul>\n            <li>.catch()</li>\n            <li>.resolve()</li>\n            <li>.reject()</li>\n            <li>.finally()</li>\n            <li>.all()</li>\n            <li>.race()</li>\n            <li>.any()</li>\n        </ul>\n    </div>\n    <!-- <script src=\"./promise.js\"></script> -->\n    <script src=\"./thenPromise.js\"></script>\n    <script src=\"./promiseMethods.js\"></script>\n    <script src=\"./index.js\"></script>\n</body>\n\n</html>","source":"examples/Promise/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        <h4>promise</h4>\n        <h4>实现new Promise().then</h4>\n        <h4>new Promise() 其他方法</h4>\n        <ul>\n            <li>.catch()</li>\n            <li>.resolve()</li>\n            <li>.reject()</li>\n            <li>.finally()</li>\n            <li>.all()</li>\n            <li>.race()</li>\n            <li>.any()</li>\n        </ul>\n    </div>\n    <!-- <script src=\"./promise.js\"></script> -->\n    <script src=\"./thenPromise.js\"></script>\n    <script src=\"./promiseMethods.js\"></script>\n    <script src=\"./index.js\"></script>\n</body>\n\n</html>","date":"2021-03-08T11:53:57.742Z","updated":"2021-03-08T11:53:57.742Z","path":"examples/Promise/index.html","_id":"cklxp6bzk0002s89k58dj91uh","title":"","comments":1,"layout":"page","content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        <h4>promise</h4>\n        <h4>实现new Promise().then</h4>\n        <h4>new Promise() 其他方法</h4>\n        <ul>\n            <li>.catch()</li>\n            <li>.resolve()</li>\n            <li>.reject()</li>\n            <li>.finally()</li>\n            <li>.all()</li>\n            <li>.race()</li>\n            <li>.any()</li>\n        </ul>\n    </div>\n    <!-- <script src=\"./promise.js\"></script> -->\n    <script src=\"./thenPromise.js\"></script>\n    <script src=\"./promiseMethods.js\"></script>\n    <script src=\"./index.js\"></script>\n</body>\n\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        <h4>promise</h4>\n        <h4>实现new Promise().then</h4>\n        <h4>new Promise() 其他方法</h4>\n        <ul>\n            <li>.catch()</li>\n            <li>.resolve()</li>\n            <li>.reject()</li>\n            <li>.finally()</li>\n            <li>.all()</li>\n            <li>.race()</li>\n            <li>.any()</li>\n        </ul>\n    </div>\n    <!-- <script src=\"./promise.js\"></script> -->\n    <script src=\"./thenPromise.js\"></script>\n    <script src=\"./promiseMethods.js\"></script>\n    <script src=\"./index.js\"></script>\n</body>\n\n</html>"},{"_content":"let bool = false;\nnew Promise((resolve, reject) => {\n    setTimeout(() => {\n        if (bool) {\n            resolve(123);\n        } else {\n            reject('error')\n        }\n    }, 1000)\n}).then(res => {\n    console.log(res, 'res')\n}).catch(err => {\n    console.log(err, 'err--')\n});","source":"examples/Promise/index.js","raw":"let bool = false;\nnew Promise((resolve, reject) => {\n    setTimeout(() => {\n        if (bool) {\n            resolve(123);\n        } else {\n            reject('error')\n        }\n    }, 1000)\n}).then(res => {\n    console.log(res, 'res')\n}).catch(err => {\n    console.log(err, 'err--')\n});","date":"2021-03-05T08:41:42.700Z","updated":"2021-03-05T08:41:42.700Z","path":"examples/Promise/index.js","layout":"false","title":"","comments":1,"_id":"cklxp6bzl0003s89k3f5739ll","content":"let bool = false;\nnew Promise((resolve, reject) => {\n    setTimeout(() => {\n        if (bool) {\n            resolve(123);\n        } else {\n            reject('error')\n        }\n    }, 1000)\n}).then(res => {\n    console.log(res, 'res')\n}).catch(err => {\n    console.log(err, 'err--')\n});","site":{"data":{}},"excerpt":"","more":"let bool = false;\nnew Promise((resolve, reject) => {\n    setTimeout(() => {\n        if (bool) {\n            resolve(123);\n        } else {\n            reject('error')\n        }\n    }, 1000)\n}).then(res => {\n    console.log(res, 'res')\n}).catch(err => {\n    console.log(err, 'err--')\n});"},{"_content":"// 基本实现promise\n// 不能链式调用\n\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        executor(this._resolve.bind(this), this._reject.bind(this));\n\n    }\n    _resolve(value) {\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    _reject(reason) {\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    playHandler(callback) {\n        let {\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.onFulfilled && onFulfilled) {\n            onFulfilled(this.value);\n        }\n        if (this.status === Promise.onRejected && onRejected) {\n            onRejected(this.reason);\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        this.callbacks.push({\n            onFulfilled,\n            onRejected\n        })\n    }\n}\nlet success = false;\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('righht');\n        } else {\n            reject('error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n}, (error) => {\n    console.log(error, 'error');\n});\n// then的第二个参数执行错误\n/**\n * .then(()=>{},()=>{})\n */","source":"examples/Promise/promise.js","raw":"// 基本实现promise\n// 不能链式调用\n\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        executor(this._resolve.bind(this), this._reject.bind(this));\n\n    }\n    _resolve(value) {\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    _reject(reason) {\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    playHandler(callback) {\n        let {\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.onFulfilled && onFulfilled) {\n            onFulfilled(this.value);\n        }\n        if (this.status === Promise.onRejected && onRejected) {\n            onRejected(this.reason);\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        this.callbacks.push({\n            onFulfilled,\n            onRejected\n        })\n    }\n}\nlet success = false;\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('righht');\n        } else {\n            reject('error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n}, (error) => {\n    console.log(error, 'error');\n});\n// then的第二个参数执行错误\n/**\n * .then(()=>{},()=>{})\n */","date":"2021-03-05T06:55:09.722Z","updated":"2021-03-05T06:55:09.721Z","path":"examples/Promise/promise.js","layout":"false","title":"","comments":1,"_id":"cklxp6bzl0004s89kbg6qeede","content":"// 基本实现promise\n// 不能链式调用\n\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        executor(this._resolve.bind(this), this._reject.bind(this));\n\n    }\n    _resolve(value) {\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    _reject(reason) {\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    playHandler(callback) {\n        let {\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.onFulfilled && onFulfilled) {\n            onFulfilled(this.value);\n        }\n        if (this.status === Promise.onRejected && onRejected) {\n            onRejected(this.reason);\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        this.callbacks.push({\n            onFulfilled,\n            onRejected\n        })\n    }\n}\nlet success = false;\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('righht');\n        } else {\n            reject('error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n}, (error) => {\n    console.log(error, 'error');\n});\n// then的第二个参数执行错误\n/**\n * .then(()=>{},()=>{})\n */","site":{"data":{}},"excerpt":"","more":"// 基本实现promise\n// 不能链式调用\n\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        executor(this._resolve.bind(this), this._reject.bind(this));\n\n    }\n    _resolve(value) {\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    _reject(reason) {\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    playHandler(callback) {\n        let {\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.onFulfilled && onFulfilled) {\n            onFulfilled(this.value);\n        }\n        if (this.status === Promise.onRejected && onRejected) {\n            onRejected(this.reason);\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        this.callbacks.push({\n            onFulfilled,\n            onRejected\n        })\n    }\n}\nlet success = false;\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('righht');\n        } else {\n            reject('error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n}, (error) => {\n    console.log(error, 'error');\n});\n// then的第二个参数执行错误\n/**\n * .then(()=>{},()=>{})\n */"},{"_content":"// 基本实现promise\n// neng链式调用\n// 链式调用原理本质是then 返回了一个new Promise()对象 暂时无 .catch和其他方法\n//只实现 then链式调用\n\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        //         executor异常处理\n        // 当执行异步操作时有可能发生异常，需要try/catch捕获到异常，并使promise进入rejected状态\n        try {\n            executor(this._resolve.bind(this), this._reject.bind(this));\n        } catch (c) {\n            this._reject(error);\n            // throw new Error('error')\n        }\n\n    }\n    _resolve(value) {\n        // 处理onFulfilled 执行的是一个promise时的情况\n        if (value instanceof Promise) {\n            //value instanceof Promise 当前的（value）promise不是第一个promise 是then方法返回值中的 promise（要处理的promise）\n            // 获取到value（promise）中的 value ：传递一个函数作为value.then()的 onFulfilled参数\n            // value内部会执行这个函数，当前promise的value赋值为value（promise）的value\n            // 【value：promise】.then(【this._resolve.bind(this)：value】, 【this._reject.bind(this)：value】)\n            value.then(this._resolve.bind(this), this._reject.bind(this))\n            return;\n        }\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    _reject(reason) {\n        if (reason instanceof Promise) {\n            reason.then(this._resolve.bind(this), this._reject.bind(this));\n            return;\n        }\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    playHandler(callback) {\n        let {\n            nextResolve,\n            nextReject,\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.pending) {\n            this.callbacks.push(callback);\n            return;\n        }\n        // if (this.status === Promise.onFulfilled && onFulfilled) {\n        //     onFulfilled(this.value);\n        // }\n        if (this.status === Promise.onFulfilled) {\n            // 没有传入 onFulfilled（回调事件） new Pronise() 没有调用 resolve() 将undefined 传入\n            // const nextValue = onFulfilled ? onFulfilled(this.value) : undefined;\n\n            // 传入存储的值\n            // 未传入onFulfilled时，value传入\n            const nextValue = onFulfilled ? onFulfilled(this.value) : this.value;\n\n            nextResolve(nextValue)\n            return;\n        }\n        // if (this.status === Promise.onRejected && onRejected) {\n        //     onRejected(this.reason);\n        // }\n        if (this.status === Promise.onRejected) {\n            // const nextReason = onRejected ? onRejected(this.reason) : undefined;\n            const nextReason = onRejected ? onRejected(this.reason) : this.reason;\n\n            nextReject(nextReason)\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        // this.callbacks.push({\n        //     onFulfilled,\n        //     onRejected\n        // })\n        // !!!!这里之所以把下一个Promsie的resolve函数和reject函数也存在callback中\n        // !!!!是为了将onFulfilled的执行结果通过nextResolve传入到下一个Promise作为它的value值\n        return new Promise((nextResolve, nextReject) => {\n            this.playHandler({\n                nextResolve,\n                nextReject,\n                onFulfilled,\n                onRejected\n            })\n        })\n    }\n}\n\nlet success = false;\n// let success = true;\n\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('一次resolve');\n        } else {\n            reject('一次错误error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n    return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(data + 'resolve()调用新的Promise')\n            }, 1000)\n        })\n        // return '二次调用then';\n}, (error) => {\n    console.log(error, 'error');\n    return 'then-> err'\n}).then(data => {\n    console.log(data, '链式调用then')\n}, error => {\n    console.log(error + '  链式调用reject()')\n});;\n// then的第二个参数执行reject返回值\n/**\n * .then(()=>{},()=>{})\n */","source":"examples/Promise/thenPromise.js","raw":"// 基本实现promise\n// neng链式调用\n// 链式调用原理本质是then 返回了一个new Promise()对象 暂时无 .catch和其他方法\n//只实现 then链式调用\n\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        //         executor异常处理\n        // 当执行异步操作时有可能发生异常，需要try/catch捕获到异常，并使promise进入rejected状态\n        try {\n            executor(this._resolve.bind(this), this._reject.bind(this));\n        } catch (c) {\n            this._reject(error);\n            // throw new Error('error')\n        }\n\n    }\n    _resolve(value) {\n        // 处理onFulfilled 执行的是一个promise时的情况\n        if (value instanceof Promise) {\n            //value instanceof Promise 当前的（value）promise不是第一个promise 是then方法返回值中的 promise（要处理的promise）\n            // 获取到value（promise）中的 value ：传递一个函数作为value.then()的 onFulfilled参数\n            // value内部会执行这个函数，当前promise的value赋值为value（promise）的value\n            // 【value：promise】.then(【this._resolve.bind(this)：value】, 【this._reject.bind(this)：value】)\n            value.then(this._resolve.bind(this), this._reject.bind(this))\n            return;\n        }\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    _reject(reason) {\n        if (reason instanceof Promise) {\n            reason.then(this._resolve.bind(this), this._reject.bind(this));\n            return;\n        }\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    playHandler(callback) {\n        let {\n            nextResolve,\n            nextReject,\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.pending) {\n            this.callbacks.push(callback);\n            return;\n        }\n        // if (this.status === Promise.onFulfilled && onFulfilled) {\n        //     onFulfilled(this.value);\n        // }\n        if (this.status === Promise.onFulfilled) {\n            // 没有传入 onFulfilled（回调事件） new Pronise() 没有调用 resolve() 将undefined 传入\n            // const nextValue = onFulfilled ? onFulfilled(this.value) : undefined;\n\n            // 传入存储的值\n            // 未传入onFulfilled时，value传入\n            const nextValue = onFulfilled ? onFulfilled(this.value) : this.value;\n\n            nextResolve(nextValue)\n            return;\n        }\n        // if (this.status === Promise.onRejected && onRejected) {\n        //     onRejected(this.reason);\n        // }\n        if (this.status === Promise.onRejected) {\n            // const nextReason = onRejected ? onRejected(this.reason) : undefined;\n            const nextReason = onRejected ? onRejected(this.reason) : this.reason;\n\n            nextReject(nextReason)\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        // this.callbacks.push({\n        //     onFulfilled,\n        //     onRejected\n        // })\n        // !!!!这里之所以把下一个Promsie的resolve函数和reject函数也存在callback中\n        // !!!!是为了将onFulfilled的执行结果通过nextResolve传入到下一个Promise作为它的value值\n        return new Promise((nextResolve, nextReject) => {\n            this.playHandler({\n                nextResolve,\n                nextReject,\n                onFulfilled,\n                onRejected\n            })\n        })\n    }\n}\n\nlet success = false;\n// let success = true;\n\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('一次resolve');\n        } else {\n            reject('一次错误error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n    return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(data + 'resolve()调用新的Promise')\n            }, 1000)\n        })\n        // return '二次调用then';\n}, (error) => {\n    console.log(error, 'error');\n    return 'then-> err'\n}).then(data => {\n    console.log(data, '链式调用then')\n}, error => {\n    console.log(error + '  链式调用reject()')\n});;\n// then的第二个参数执行reject返回值\n/**\n * .then(()=>{},()=>{})\n */","date":"2021-03-05T08:48:37.429Z","updated":"2021-03-05T08:48:37.429Z","path":"examples/Promise/thenPromise.js","layout":"false","title":"","comments":1,"_id":"cklxp6bzm0005s89k6y2l4q44","content":"// 基本实现promise\n// neng链式调用\n// 链式调用原理本质是then 返回了一个new Promise()对象 暂时无 .catch和其他方法\n//只实现 then链式调用\n\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        //         executor异常处理\n        // 当执行异步操作时有可能发生异常，需要try/catch捕获到异常，并使promise进入rejected状态\n        try {\n            executor(this._resolve.bind(this), this._reject.bind(this));\n        } catch (c) {\n            this._reject(error);\n            // throw new Error('error')\n        }\n\n    }\n    _resolve(value) {\n        // 处理onFulfilled 执行的是一个promise时的情况\n        if (value instanceof Promise) {\n            //value instanceof Promise 当前的（value）promise不是第一个promise 是then方法返回值中的 promise（要处理的promise）\n            // 获取到value（promise）中的 value ：传递一个函数作为value.then()的 onFulfilled参数\n            // value内部会执行这个函数，当前promise的value赋值为value（promise）的value\n            // 【value：promise】.then(【this._resolve.bind(this)：value】, 【this._reject.bind(this)：value】)\n            value.then(this._resolve.bind(this), this._reject.bind(this))\n            return;\n        }\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    _reject(reason) {\n        if (reason instanceof Promise) {\n            reason.then(this._resolve.bind(this), this._reject.bind(this));\n            return;\n        }\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    playHandler(callback) {\n        let {\n            nextResolve,\n            nextReject,\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.pending) {\n            this.callbacks.push(callback);\n            return;\n        }\n        // if (this.status === Promise.onFulfilled && onFulfilled) {\n        //     onFulfilled(this.value);\n        // }\n        if (this.status === Promise.onFulfilled) {\n            // 没有传入 onFulfilled（回调事件） new Pronise() 没有调用 resolve() 将undefined 传入\n            // const nextValue = onFulfilled ? onFulfilled(this.value) : undefined;\n\n            // 传入存储的值\n            // 未传入onFulfilled时，value传入\n            const nextValue = onFulfilled ? onFulfilled(this.value) : this.value;\n\n            nextResolve(nextValue)\n            return;\n        }\n        // if (this.status === Promise.onRejected && onRejected) {\n        //     onRejected(this.reason);\n        // }\n        if (this.status === Promise.onRejected) {\n            // const nextReason = onRejected ? onRejected(this.reason) : undefined;\n            const nextReason = onRejected ? onRejected(this.reason) : this.reason;\n\n            nextReject(nextReason)\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        // this.callbacks.push({\n        //     onFulfilled,\n        //     onRejected\n        // })\n        // !!!!这里之所以把下一个Promsie的resolve函数和reject函数也存在callback中\n        // !!!!是为了将onFulfilled的执行结果通过nextResolve传入到下一个Promise作为它的value值\n        return new Promise((nextResolve, nextReject) => {\n            this.playHandler({\n                nextResolve,\n                nextReject,\n                onFulfilled,\n                onRejected\n            })\n        })\n    }\n}\n\nlet success = false;\n// let success = true;\n\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('一次resolve');\n        } else {\n            reject('一次错误error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n    return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(data + 'resolve()调用新的Promise')\n            }, 1000)\n        })\n        // return '二次调用then';\n}, (error) => {\n    console.log(error, 'error');\n    return 'then-> err'\n}).then(data => {\n    console.log(data, '链式调用then')\n}, error => {\n    console.log(error + '  链式调用reject()')\n});;\n// then的第二个参数执行reject返回值\n/**\n * .then(()=>{},()=>{})\n */","site":{"data":{}},"excerpt":"","more":"// 基本实现promise\n// neng链式调用\n// 链式调用原理本质是then 返回了一个new Promise()对象 暂时无 .catch和其他方法\n//只实现 then链式调用\n\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        //         executor异常处理\n        // 当执行异步操作时有可能发生异常，需要try/catch捕获到异常，并使promise进入rejected状态\n        try {\n            executor(this._resolve.bind(this), this._reject.bind(this));\n        } catch (c) {\n            this._reject(error);\n            // throw new Error('error')\n        }\n\n    }\n    _resolve(value) {\n        // 处理onFulfilled 执行的是一个promise时的情况\n        if (value instanceof Promise) {\n            //value instanceof Promise 当前的（value）promise不是第一个promise 是then方法返回值中的 promise（要处理的promise）\n            // 获取到value（promise）中的 value ：传递一个函数作为value.then()的 onFulfilled参数\n            // value内部会执行这个函数，当前promise的value赋值为value（promise）的value\n            // 【value：promise】.then(【this._resolve.bind(this)：value】, 【this._reject.bind(this)：value】)\n            value.then(this._resolve.bind(this), this._reject.bind(this))\n            return;\n        }\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    _reject(reason) {\n        if (reason instanceof Promise) {\n            reason.then(this._resolve.bind(this), this._reject.bind(this));\n            return;\n        }\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    playHandler(callback) {\n        let {\n            nextResolve,\n            nextReject,\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.pending) {\n            this.callbacks.push(callback);\n            return;\n        }\n        // if (this.status === Promise.onFulfilled && onFulfilled) {\n        //     onFulfilled(this.value);\n        // }\n        if (this.status === Promise.onFulfilled) {\n            // 没有传入 onFulfilled（回调事件） new Pronise() 没有调用 resolve() 将undefined 传入\n            // const nextValue = onFulfilled ? onFulfilled(this.value) : undefined;\n\n            // 传入存储的值\n            // 未传入onFulfilled时，value传入\n            const nextValue = onFulfilled ? onFulfilled(this.value) : this.value;\n\n            nextResolve(nextValue)\n            return;\n        }\n        // if (this.status === Promise.onRejected && onRejected) {\n        //     onRejected(this.reason);\n        // }\n        if (this.status === Promise.onRejected) {\n            // const nextReason = onRejected ? onRejected(this.reason) : undefined;\n            const nextReason = onRejected ? onRejected(this.reason) : this.reason;\n\n            nextReject(nextReason)\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        // this.callbacks.push({\n        //     onFulfilled,\n        //     onRejected\n        // })\n        // !!!!这里之所以把下一个Promsie的resolve函数和reject函数也存在callback中\n        // !!!!是为了将onFulfilled的执行结果通过nextResolve传入到下一个Promise作为它的value值\n        return new Promise((nextResolve, nextReject) => {\n            this.playHandler({\n                nextResolve,\n                nextReject,\n                onFulfilled,\n                onRejected\n            })\n        })\n    }\n}\n\nlet success = false;\n// let success = true;\n\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('一次resolve');\n        } else {\n            reject('一次错误error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n    return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(data + 'resolve()调用新的Promise')\n            }, 1000)\n        })\n        // return '二次调用then';\n}, (error) => {\n    console.log(error, 'error');\n    return 'then-> err'\n}).then(data => {\n    console.log(data, '链式调用then')\n}, error => {\n    console.log(error + '  链式调用reject()')\n});;\n// then的第二个参数执行reject返回值\n/**\n * .then(()=>{},()=>{})\n */"},{"_content":"/**\n * .catch() 方法实现\n * 实际上是 .then的语法糖\n */\nPromise.prototype.catch = function(callback) {\n    return this.then(null, callback);\n}\n\n/**\n * Promise.resolve() 实际上调用的是 new Promise()；并且调用 resolve();\n * 生成一个成功的promise\n */\n\n/**\n * \n * @param {*} value value !== 'object' value !== 'function'\n */\nPromise.resolve1 = function(value) {\n    return new Promise(resolve => {\n        resolve(value);\n    })\n}\nPromise.resolve1(1).then(res => {\n    console.log(res, 'Promise.resolve1()')\n})\n\n/**\n * \n * @param {*} value value === 'object' value === 'function'\n * value 是一个Promise的实例\n */\nPromise.resolve2 = function(value) {\n    // instanceof 检测符用于 检测构造函数的prototype属性是否出现在某个实例对象的原型上\n    if (value instanceof Promise) return value;\n    if (value === null) return null;\n    if (typeof value === 'object' || typeof value === 'function') {\n        // value 是不是一个Promise()是否有then方法\n        try {\n            // 这段语句中有任何错误都会执行catch\n            let then = value.then;\n            if (typeof then === 'function') {\n                return new Promise(then.call(value)); // 执行value方法\n            }\n        } catch (error) {\n            return new Promise((resolve, reject) => {\n                reject(error);\n            })\n        }\n    }\n    return value;\n}\n\n// 参数不是 promise的实例\nconsole.log(Promise.resolve2(2), 'Promise.resolve2()')\n\n// 参数是 promise的实例\nPromise.resolve2(new Promise(resolve => { resolve(33) })).then(val => {\n    console.log(val, 'Promise.resolve2() val3')\n})\n\n/**\n * Promise.reject() 实际上调用的是 new Promise()；并且调用 reject();\n * 生成一个失败的promise\n */\nPromise.reject = function(reason) {\n    return new Promise((resolve, reject) => {\n        reject(reason);\n    })\n}\nconsole.log(Promise.reject('error'));\nPromise.reject('error').catch(res => {\n    console.log(res, 'Promise.catch()')\n})\n\n/**\n * Promise.finally() 无论成功或者失败都会执行\n * 返回 Promise()\n */\n// this.then(() =>{}, () =>{}).finally(callback);  ....callback(); callback有可能返回一个 promise\nPromise.prototype.finally = function(callback) {\n    return this.then(value => {\n            // callback(); return value；也可能return new Promise();\n            // Promise.resolve1() 会等callback() 执行完毕\n            return Promise.resolve1(callback()).then(() => value);\n        },\n        err => {\n            // 错误信息向下传递\n            return Promise.resolve1(callback()).then(() => {\n                throw err;\n            });\n        }\n    )\n};\n\n/**\n * Promise.all()\n * all()接受一个成员为promise实例的数组 依次执行，按顺序返回结果\n * 所有的执行成功进入成功态，失败一个进入失败状态\n */\nPromise.all = function(arr) {\n    return new Promise((resolve, reject) => {\n        let endAnswer = [];\n        let count = 0;\n        for (let i = 0; i < arr.length; i++) {\n            let oncePro = arr[i];\n            oncePro.then(function(val) {\n                endAnswer[i] = val;\n                count++;\n                if (count === arr.length) {\n                    resolve(endAnswer)\n                }\n            }, reject);\n        }\n    })\n}\nlet promise1 = new Promise(function(resolve) {\n    resolve(1);\n});\nlet promise2 = new Promise(function(resolve) {\n    resolve(2);\n});\nlet promise3 = new Promise(function(resolve) {\n    resolve(3);\n});\n\nlet promiseAll = Promise.all([promise1, promise2, promise3]);\npromiseAll.then(function(res) {\n    console.log(res, 'promise.all()');\n});\n// [1, 2, 3] \"promise.all()\"\n\n/**\n * Promise.race()\n * race()接受一个成员为primise实例的数组，\n * 一个成功就成功，一个失败就失败\n */\n\nPromise.race = function(arr) {\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < arr.length; i++) {\n            arr[i].then(resolve, reject);\n        }\n    })\n}\n\n/**\n * Promise.any()\n * \n * 如果传入的参数是一个空的可迭代对象，则返回一个 已失败（already rejected） 状态的 Promise。\n * 如果传入的参数不包含任何 promise，则返回一个 异步完成 （asynchronously resolved）的 Promise。\n * 其他情况下都会返回一个处理中（pending） 的 Promise。 \n *      只要传入的迭代对象中的任何一个 promise 变成成功（resolve）状态，或者其中的所有的 promises 都失败，\n *      那么返回的 promise 就会 异步地（当调用栈为空时） 变成成功/失败（resolved/reject）状态。\n * \n */","source":"examples/Promise/promiseMethods.js","raw":"/**\n * .catch() 方法实现\n * 实际上是 .then的语法糖\n */\nPromise.prototype.catch = function(callback) {\n    return this.then(null, callback);\n}\n\n/**\n * Promise.resolve() 实际上调用的是 new Promise()；并且调用 resolve();\n * 生成一个成功的promise\n */\n\n/**\n * \n * @param {*} value value !== 'object' value !== 'function'\n */\nPromise.resolve1 = function(value) {\n    return new Promise(resolve => {\n        resolve(value);\n    })\n}\nPromise.resolve1(1).then(res => {\n    console.log(res, 'Promise.resolve1()')\n})\n\n/**\n * \n * @param {*} value value === 'object' value === 'function'\n * value 是一个Promise的实例\n */\nPromise.resolve2 = function(value) {\n    // instanceof 检测符用于 检测构造函数的prototype属性是否出现在某个实例对象的原型上\n    if (value instanceof Promise) return value;\n    if (value === null) return null;\n    if (typeof value === 'object' || typeof value === 'function') {\n        // value 是不是一个Promise()是否有then方法\n        try {\n            // 这段语句中有任何错误都会执行catch\n            let then = value.then;\n            if (typeof then === 'function') {\n                return new Promise(then.call(value)); // 执行value方法\n            }\n        } catch (error) {\n            return new Promise((resolve, reject) => {\n                reject(error);\n            })\n        }\n    }\n    return value;\n}\n\n// 参数不是 promise的实例\nconsole.log(Promise.resolve2(2), 'Promise.resolve2()')\n\n// 参数是 promise的实例\nPromise.resolve2(new Promise(resolve => { resolve(33) })).then(val => {\n    console.log(val, 'Promise.resolve2() val3')\n})\n\n/**\n * Promise.reject() 实际上调用的是 new Promise()；并且调用 reject();\n * 生成一个失败的promise\n */\nPromise.reject = function(reason) {\n    return new Promise((resolve, reject) => {\n        reject(reason);\n    })\n}\nconsole.log(Promise.reject('error'));\nPromise.reject('error').catch(res => {\n    console.log(res, 'Promise.catch()')\n})\n\n/**\n * Promise.finally() 无论成功或者失败都会执行\n * 返回 Promise()\n */\n// this.then(() =>{}, () =>{}).finally(callback);  ....callback(); callback有可能返回一个 promise\nPromise.prototype.finally = function(callback) {\n    return this.then(value => {\n            // callback(); return value；也可能return new Promise();\n            // Promise.resolve1() 会等callback() 执行完毕\n            return Promise.resolve1(callback()).then(() => value);\n        },\n        err => {\n            // 错误信息向下传递\n            return Promise.resolve1(callback()).then(() => {\n                throw err;\n            });\n        }\n    )\n};\n\n/**\n * Promise.all()\n * all()接受一个成员为promise实例的数组 依次执行，按顺序返回结果\n * 所有的执行成功进入成功态，失败一个进入失败状态\n */\nPromise.all = function(arr) {\n    return new Promise((resolve, reject) => {\n        let endAnswer = [];\n        let count = 0;\n        for (let i = 0; i < arr.length; i++) {\n            let oncePro = arr[i];\n            oncePro.then(function(val) {\n                endAnswer[i] = val;\n                count++;\n                if (count === arr.length) {\n                    resolve(endAnswer)\n                }\n            }, reject);\n        }\n    })\n}\nlet promise1 = new Promise(function(resolve) {\n    resolve(1);\n});\nlet promise2 = new Promise(function(resolve) {\n    resolve(2);\n});\nlet promise3 = new Promise(function(resolve) {\n    resolve(3);\n});\n\nlet promiseAll = Promise.all([promise1, promise2, promise3]);\npromiseAll.then(function(res) {\n    console.log(res, 'promise.all()');\n});\n// [1, 2, 3] \"promise.all()\"\n\n/**\n * Promise.race()\n * race()接受一个成员为primise实例的数组，\n * 一个成功就成功，一个失败就失败\n */\n\nPromise.race = function(arr) {\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < arr.length; i++) {\n            arr[i].then(resolve, reject);\n        }\n    })\n}\n\n/**\n * Promise.any()\n * \n * 如果传入的参数是一个空的可迭代对象，则返回一个 已失败（already rejected） 状态的 Promise。\n * 如果传入的参数不包含任何 promise，则返回一个 异步完成 （asynchronously resolved）的 Promise。\n * 其他情况下都会返回一个处理中（pending） 的 Promise。 \n *      只要传入的迭代对象中的任何一个 promise 变成成功（resolve）状态，或者其中的所有的 promises 都失败，\n *      那么返回的 promise 就会 异步地（当调用栈为空时） 变成成功/失败（resolved/reject）状态。\n * \n */","date":"2021-03-08T11:58:58.418Z","updated":"2021-03-08T11:58:58.418Z","path":"examples/Promise/promiseMethods.js","layout":"false","_id":"cklxp6bzm0006s89k08bg5mt6","title":"","comments":1,"content":"/**\n * .catch() 方法实现\n * 实际上是 .then的语法糖\n */\nPromise.prototype.catch = function(callback) {\n    return this.then(null, callback);\n}\n\n/**\n * Promise.resolve() 实际上调用的是 new Promise()；并且调用 resolve();\n * 生成一个成功的promise\n */\n\n/**\n * \n * @param {*} value value !== 'object' value !== 'function'\n */\nPromise.resolve1 = function(value) {\n    return new Promise(resolve => {\n        resolve(value);\n    })\n}\nPromise.resolve1(1).then(res => {\n    console.log(res, 'Promise.resolve1()')\n})\n\n/**\n * \n * @param {*} value value === 'object' value === 'function'\n * value 是一个Promise的实例\n */\nPromise.resolve2 = function(value) {\n    // instanceof 检测符用于 检测构造函数的prototype属性是否出现在某个实例对象的原型上\n    if (value instanceof Promise) return value;\n    if (value === null) return null;\n    if (typeof value === 'object' || typeof value === 'function') {\n        // value 是不是一个Promise()是否有then方法\n        try {\n            // 这段语句中有任何错误都会执行catch\n            let then = value.then;\n            if (typeof then === 'function') {\n                return new Promise(then.call(value)); // 执行value方法\n            }\n        } catch (error) {\n            return new Promise((resolve, reject) => {\n                reject(error);\n            })\n        }\n    }\n    return value;\n}\n\n// 参数不是 promise的实例\nconsole.log(Promise.resolve2(2), 'Promise.resolve2()')\n\n// 参数是 promise的实例\nPromise.resolve2(new Promise(resolve => { resolve(33) })).then(val => {\n    console.log(val, 'Promise.resolve2() val3')\n})\n\n/**\n * Promise.reject() 实际上调用的是 new Promise()；并且调用 reject();\n * 生成一个失败的promise\n */\nPromise.reject = function(reason) {\n    return new Promise((resolve, reject) => {\n        reject(reason);\n    })\n}\nconsole.log(Promise.reject('error'));\nPromise.reject('error').catch(res => {\n    console.log(res, 'Promise.catch()')\n})\n\n/**\n * Promise.finally() 无论成功或者失败都会执行\n * 返回 Promise()\n */\n// this.then(() =>{}, () =>{}).finally(callback);  ....callback(); callback有可能返回一个 promise\nPromise.prototype.finally = function(callback) {\n    return this.then(value => {\n            // callback(); return value；也可能return new Promise();\n            // Promise.resolve1() 会等callback() 执行完毕\n            return Promise.resolve1(callback()).then(() => value);\n        },\n        err => {\n            // 错误信息向下传递\n            return Promise.resolve1(callback()).then(() => {\n                throw err;\n            });\n        }\n    )\n};\n\n/**\n * Promise.all()\n * all()接受一个成员为promise实例的数组 依次执行，按顺序返回结果\n * 所有的执行成功进入成功态，失败一个进入失败状态\n */\nPromise.all = function(arr) {\n    return new Promise((resolve, reject) => {\n        let endAnswer = [];\n        let count = 0;\n        for (let i = 0; i < arr.length; i++) {\n            let oncePro = arr[i];\n            oncePro.then(function(val) {\n                endAnswer[i] = val;\n                count++;\n                if (count === arr.length) {\n                    resolve(endAnswer)\n                }\n            }, reject);\n        }\n    })\n}\nlet promise1 = new Promise(function(resolve) {\n    resolve(1);\n});\nlet promise2 = new Promise(function(resolve) {\n    resolve(2);\n});\nlet promise3 = new Promise(function(resolve) {\n    resolve(3);\n});\n\nlet promiseAll = Promise.all([promise1, promise2, promise3]);\npromiseAll.then(function(res) {\n    console.log(res, 'promise.all()');\n});\n// [1, 2, 3] \"promise.all()\"\n\n/**\n * Promise.race()\n * race()接受一个成员为primise实例的数组，\n * 一个成功就成功，一个失败就失败\n */\n\nPromise.race = function(arr) {\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < arr.length; i++) {\n            arr[i].then(resolve, reject);\n        }\n    })\n}\n\n/**\n * Promise.any()\n * \n * 如果传入的参数是一个空的可迭代对象，则返回一个 已失败（already rejected） 状态的 Promise。\n * 如果传入的参数不包含任何 promise，则返回一个 异步完成 （asynchronously resolved）的 Promise。\n * 其他情况下都会返回一个处理中（pending） 的 Promise。 \n *      只要传入的迭代对象中的任何一个 promise 变成成功（resolve）状态，或者其中的所有的 promises 都失败，\n *      那么返回的 promise 就会 异步地（当调用栈为空时） 变成成功/失败（resolved/reject）状态。\n * \n */","site":{"data":{}},"excerpt":"","more":"/**\n * .catch() 方法实现\n * 实际上是 .then的语法糖\n */\nPromise.prototype.catch = function(callback) {\n    return this.then(null, callback);\n}\n\n/**\n * Promise.resolve() 实际上调用的是 new Promise()；并且调用 resolve();\n * 生成一个成功的promise\n */\n\n/**\n * \n * @param {*} value value !== 'object' value !== 'function'\n */\nPromise.resolve1 = function(value) {\n    return new Promise(resolve => {\n        resolve(value);\n    })\n}\nPromise.resolve1(1).then(res => {\n    console.log(res, 'Promise.resolve1()')\n})\n\n/**\n * \n * @param {*} value value === 'object' value === 'function'\n * value 是一个Promise的实例\n */\nPromise.resolve2 = function(value) {\n    // instanceof 检测符用于 检测构造函数的prototype属性是否出现在某个实例对象的原型上\n    if (value instanceof Promise) return value;\n    if (value === null) return null;\n    if (typeof value === 'object' || typeof value === 'function') {\n        // value 是不是一个Promise()是否有then方法\n        try {\n            // 这段语句中有任何错误都会执行catch\n            let then = value.then;\n            if (typeof then === 'function') {\n                return new Promise(then.call(value)); // 执行value方法\n            }\n        } catch (error) {\n            return new Promise((resolve, reject) => {\n                reject(error);\n            })\n        }\n    }\n    return value;\n}\n\n// 参数不是 promise的实例\nconsole.log(Promise.resolve2(2), 'Promise.resolve2()')\n\n// 参数是 promise的实例\nPromise.resolve2(new Promise(resolve => { resolve(33) })).then(val => {\n    console.log(val, 'Promise.resolve2() val3')\n})\n\n/**\n * Promise.reject() 实际上调用的是 new Promise()；并且调用 reject();\n * 生成一个失败的promise\n */\nPromise.reject = function(reason) {\n    return new Promise((resolve, reject) => {\n        reject(reason);\n    })\n}\nconsole.log(Promise.reject('error'));\nPromise.reject('error').catch(res => {\n    console.log(res, 'Promise.catch()')\n})\n\n/**\n * Promise.finally() 无论成功或者失败都会执行\n * 返回 Promise()\n */\n// this.then(() =>{}, () =>{}).finally(callback);  ....callback(); callback有可能返回一个 promise\nPromise.prototype.finally = function(callback) {\n    return this.then(value => {\n            // callback(); return value；也可能return new Promise();\n            // Promise.resolve1() 会等callback() 执行完毕\n            return Promise.resolve1(callback()).then(() => value);\n        },\n        err => {\n            // 错误信息向下传递\n            return Promise.resolve1(callback()).then(() => {\n                throw err;\n            });\n        }\n    )\n};\n\n/**\n * Promise.all()\n * all()接受一个成员为promise实例的数组 依次执行，按顺序返回结果\n * 所有的执行成功进入成功态，失败一个进入失败状态\n */\nPromise.all = function(arr) {\n    return new Promise((resolve, reject) => {\n        let endAnswer = [];\n        let count = 0;\n        for (let i = 0; i < arr.length; i++) {\n            let oncePro = arr[i];\n            oncePro.then(function(val) {\n                endAnswer[i] = val;\n                count++;\n                if (count === arr.length) {\n                    resolve(endAnswer)\n                }\n            }, reject);\n        }\n    })\n}\nlet promise1 = new Promise(function(resolve) {\n    resolve(1);\n});\nlet promise2 = new Promise(function(resolve) {\n    resolve(2);\n});\nlet promise3 = new Promise(function(resolve) {\n    resolve(3);\n});\n\nlet promiseAll = Promise.all([promise1, promise2, promise3]);\npromiseAll.then(function(res) {\n    console.log(res, 'promise.all()');\n});\n// [1, 2, 3] \"promise.all()\"\n\n/**\n * Promise.race()\n * race()接受一个成员为primise实例的数组，\n * 一个成功就成功，一个失败就失败\n */\n\nPromise.race = function(arr) {\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < arr.length; i++) {\n            arr[i].then(resolve, reject);\n        }\n    })\n}\n\n/**\n * Promise.any()\n * \n * 如果传入的参数是一个空的可迭代对象，则返回一个 已失败（already rejected） 状态的 Promise。\n * 如果传入的参数不包含任何 promise，则返回一个 异步完成 （asynchronously resolved）的 Promise。\n * 其他情况下都会返回一个处理中（pending） 的 Promise。 \n *      只要传入的迭代对象中的任何一个 promise 变成成功（resolve）状态，或者其中的所有的 promises 都失败，\n *      那么返回的 promise 就会 异步地（当调用栈为空时） 变成成功/失败（resolved/reject）状态。\n * \n */"},{"_content":"const PENDING = \"PENDING\",\n  FULFILLED = \"FULFILLED\",\n  REJECTED = \"REJECTED\";\n\nfunction resolvePromise(promise2, x, resolve, reject) {\n  if (promise2 === x) {\n    reject(new TypeError(\"Chaining cycle detected for promise #<Promise>\"));\n  }\n  let called = false;\n\n  if ((typeof x === \"object\" && x !== null) || typeof x === \"function\") {\n    try {\n      //x.then 执行错误,抛出异常\n      let then = x.then;\n      if (typeof then === \"function\") {\n        then.call(\n          x,\n          (y) => {\n            //y是resolve中传递的值\n            if (called) return;\n            called = true;\n            resolvePromise(promise2, y, resolve, reject);\n          },\n          (r) => {\n            if (called) return;\n            called = true;\n            reject(r);\n          }\n        );\n      } else {\n        if (called) return;\n        called = true;\n        resolve(x);\n      }\n    } catch (error) {\n      if (called) return;\n      called = true;\n      reject(error);\n    }\n  } else {\n    resolve(x);\n  }\n}\n\nfunction isPromise(val) {\n  if ((typeof val === \"object\" && val !== null) || typeof val === \"function\") {\n    return typeof val.then === \"function\";\n  }\n  return false;\n}\n\nclass Promise {\n  constructor(executor) {\n    this.status = PENDING;\n    this.onFulfilledCallback = [];\n    this.onRejectedCallback = [];\n    let resolve = (value) => {\n      if (this.status === PENDING) {\n        if (value instanceof Promise) {\n          return value.then(resolve, reject);\n        }\n        this.value = value;\n        this.status = FULFILLED;\n        this.onFulfilledCallback.forEach((fn) => fn());\n      }\n    };\n    let reject = (reason) => {\n      if (this.status === PENDING) {\n        this.reason = reason;\n        this.status = REJECTED;\n        this.onRejectedCallback.forEach((fn) => fn());\n      }\n    };\n    try {\n      executor(resolve, reject);\n    } catch (error) {\n      reject(error);\n    }\n  }\n  then(onFulfilled, onRejected) {\n    onFulfilled =\n      typeof onFulfilled === \"function\" ? onFulfilled : (value) => value;\n    onRejected =\n      typeof onRejected === \"function\"\n        ? onRejected\n        : (err) => {\n            throw err;\n          };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.status === PENDING) {\n        this.onFulfilledCallback.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          });\n        });\n\n        this.onRejectedCallback.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          });\n        });\n      }\n      if (this.status === FULFILLED) {\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      }\n      if (this.status === REJECTED) {\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      }\n    });\n    return promise2;\n  }\n  catch(err) {\n    return this.then(null, () => {\n      throw err;\n    });\n  }\n  static resolve(val) {\n    return new Promise((resolve, reject) => {\n      resolve(val);\n    });\n  }\n  static reject(err) {\n    return new Promise((resolve, reject) => {\n      reject(err);\n    });\n  }\n  static race(promises) {\n    return new Promise((resolve, reject) => {\n      function resolvePromise(val) {\n        if (isPromise(val)) {\n          val.then((data) => {\n            resolvePromise(data);\n          }, reject);\n        } else {\n          processData(val);\n        }\n      }\n      function processData(val) {\n        resolve(val);\n      }\n      for (let i = 0; i < promises.length; i++) {\n        const item = promises[i];\n        resolvePromise(item, i);\n      }\n    });\n  }\n  static all(promises) {\n    return new Promise((resolve, reject) => {\n      let arr = [],\n        index = 0,\n        len = promises.length;\n      function resolvePromise(val, index) {\n        if (isPromise(val)) {\n          val.then((data) => {\n            resolvePromise(data, index);\n          }, reject);\n        } else {\n          processData(val, index);\n        }\n      }\n      function processData(val, i) {\n        arr[i] = val;\n        if (len === ++index) {\n          resolve(arr);\n        }\n      }\n      for (let i = 0; i < promises.length; i++) {\n        const item = promises[i];\n        resolvePromise(item, i);\n      }\n    });\n  }\n}\n\n// 测试 需要测试再添加\nPromise.defer = Promise.deferred = function () {\n  let dfd = {};\n  dfd.promise = new Promise((resolve, reject) => {\n    dfd.resolve = resolve;\n    dfd.reject = reject;\n  });\n  return dfd;\n};\nmodule.exports = Promise;\n","source":"examples/Promise/Promise(1).js","raw":"const PENDING = \"PENDING\",\n  FULFILLED = \"FULFILLED\",\n  REJECTED = \"REJECTED\";\n\nfunction resolvePromise(promise2, x, resolve, reject) {\n  if (promise2 === x) {\n    reject(new TypeError(\"Chaining cycle detected for promise #<Promise>\"));\n  }\n  let called = false;\n\n  if ((typeof x === \"object\" && x !== null) || typeof x === \"function\") {\n    try {\n      //x.then 执行错误,抛出异常\n      let then = x.then;\n      if (typeof then === \"function\") {\n        then.call(\n          x,\n          (y) => {\n            //y是resolve中传递的值\n            if (called) return;\n            called = true;\n            resolvePromise(promise2, y, resolve, reject);\n          },\n          (r) => {\n            if (called) return;\n            called = true;\n            reject(r);\n          }\n        );\n      } else {\n        if (called) return;\n        called = true;\n        resolve(x);\n      }\n    } catch (error) {\n      if (called) return;\n      called = true;\n      reject(error);\n    }\n  } else {\n    resolve(x);\n  }\n}\n\nfunction isPromise(val) {\n  if ((typeof val === \"object\" && val !== null) || typeof val === \"function\") {\n    return typeof val.then === \"function\";\n  }\n  return false;\n}\n\nclass Promise {\n  constructor(executor) {\n    this.status = PENDING;\n    this.onFulfilledCallback = [];\n    this.onRejectedCallback = [];\n    let resolve = (value) => {\n      if (this.status === PENDING) {\n        if (value instanceof Promise) {\n          return value.then(resolve, reject);\n        }\n        this.value = value;\n        this.status = FULFILLED;\n        this.onFulfilledCallback.forEach((fn) => fn());\n      }\n    };\n    let reject = (reason) => {\n      if (this.status === PENDING) {\n        this.reason = reason;\n        this.status = REJECTED;\n        this.onRejectedCallback.forEach((fn) => fn());\n      }\n    };\n    try {\n      executor(resolve, reject);\n    } catch (error) {\n      reject(error);\n    }\n  }\n  then(onFulfilled, onRejected) {\n    onFulfilled =\n      typeof onFulfilled === \"function\" ? onFulfilled : (value) => value;\n    onRejected =\n      typeof onRejected === \"function\"\n        ? onRejected\n        : (err) => {\n            throw err;\n          };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.status === PENDING) {\n        this.onFulfilledCallback.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          });\n        });\n\n        this.onRejectedCallback.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          });\n        });\n      }\n      if (this.status === FULFILLED) {\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      }\n      if (this.status === REJECTED) {\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      }\n    });\n    return promise2;\n  }\n  catch(err) {\n    return this.then(null, () => {\n      throw err;\n    });\n  }\n  static resolve(val) {\n    return new Promise((resolve, reject) => {\n      resolve(val);\n    });\n  }\n  static reject(err) {\n    return new Promise((resolve, reject) => {\n      reject(err);\n    });\n  }\n  static race(promises) {\n    return new Promise((resolve, reject) => {\n      function resolvePromise(val) {\n        if (isPromise(val)) {\n          val.then((data) => {\n            resolvePromise(data);\n          }, reject);\n        } else {\n          processData(val);\n        }\n      }\n      function processData(val) {\n        resolve(val);\n      }\n      for (let i = 0; i < promises.length; i++) {\n        const item = promises[i];\n        resolvePromise(item, i);\n      }\n    });\n  }\n  static all(promises) {\n    return new Promise((resolve, reject) => {\n      let arr = [],\n        index = 0,\n        len = promises.length;\n      function resolvePromise(val, index) {\n        if (isPromise(val)) {\n          val.then((data) => {\n            resolvePromise(data, index);\n          }, reject);\n        } else {\n          processData(val, index);\n        }\n      }\n      function processData(val, i) {\n        arr[i] = val;\n        if (len === ++index) {\n          resolve(arr);\n        }\n      }\n      for (let i = 0; i < promises.length; i++) {\n        const item = promises[i];\n        resolvePromise(item, i);\n      }\n    });\n  }\n}\n\n// 测试 需要测试再添加\nPromise.defer = Promise.deferred = function () {\n  let dfd = {};\n  dfd.promise = new Promise((resolve, reject) => {\n    dfd.resolve = resolve;\n    dfd.reject = reject;\n  });\n  return dfd;\n};\nmodule.exports = Promise;\n","date":"2021-03-06T15:24:01.796Z","updated":"2021-03-06T15:24:01.796Z","path":"examples/Promise/Promise(1).js","layout":"false","title":"","comments":1,"_id":"ckm0iw64x0000o79k7aolhxxw","content":"const PENDING = \"PENDING\",\n  FULFILLED = \"FULFILLED\",\n  REJECTED = \"REJECTED\";\n\nfunction resolvePromise(promise2, x, resolve, reject) {\n  if (promise2 === x) {\n    reject(new TypeError(\"Chaining cycle detected for promise #<Promise>\"));\n  }\n  let called = false;\n\n  if ((typeof x === \"object\" && x !== null) || typeof x === \"function\") {\n    try {\n      //x.then 执行错误,抛出异常\n      let then = x.then;\n      if (typeof then === \"function\") {\n        then.call(\n          x,\n          (y) => {\n            //y是resolve中传递的值\n            if (called) return;\n            called = true;\n            resolvePromise(promise2, y, resolve, reject);\n          },\n          (r) => {\n            if (called) return;\n            called = true;\n            reject(r);\n          }\n        );\n      } else {\n        if (called) return;\n        called = true;\n        resolve(x);\n      }\n    } catch (error) {\n      if (called) return;\n      called = true;\n      reject(error);\n    }\n  } else {\n    resolve(x);\n  }\n}\n\nfunction isPromise(val) {\n  if ((typeof val === \"object\" && val !== null) || typeof val === \"function\") {\n    return typeof val.then === \"function\";\n  }\n  return false;\n}\n\nclass Promise {\n  constructor(executor) {\n    this.status = PENDING;\n    this.onFulfilledCallback = [];\n    this.onRejectedCallback = [];\n    let resolve = (value) => {\n      if (this.status === PENDING) {\n        if (value instanceof Promise) {\n          return value.then(resolve, reject);\n        }\n        this.value = value;\n        this.status = FULFILLED;\n        this.onFulfilledCallback.forEach((fn) => fn());\n      }\n    };\n    let reject = (reason) => {\n      if (this.status === PENDING) {\n        this.reason = reason;\n        this.status = REJECTED;\n        this.onRejectedCallback.forEach((fn) => fn());\n      }\n    };\n    try {\n      executor(resolve, reject);\n    } catch (error) {\n      reject(error);\n    }\n  }\n  then(onFulfilled, onRejected) {\n    onFulfilled =\n      typeof onFulfilled === \"function\" ? onFulfilled : (value) => value;\n    onRejected =\n      typeof onRejected === \"function\"\n        ? onRejected\n        : (err) => {\n            throw err;\n          };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.status === PENDING) {\n        this.onFulfilledCallback.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          });\n        });\n\n        this.onRejectedCallback.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          });\n        });\n      }\n      if (this.status === FULFILLED) {\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      }\n      if (this.status === REJECTED) {\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      }\n    });\n    return promise2;\n  }\n  catch(err) {\n    return this.then(null, () => {\n      throw err;\n    });\n  }\n  static resolve(val) {\n    return new Promise((resolve, reject) => {\n      resolve(val);\n    });\n  }\n  static reject(err) {\n    return new Promise((resolve, reject) => {\n      reject(err);\n    });\n  }\n  static race(promises) {\n    return new Promise((resolve, reject) => {\n      function resolvePromise(val) {\n        if (isPromise(val)) {\n          val.then((data) => {\n            resolvePromise(data);\n          }, reject);\n        } else {\n          processData(val);\n        }\n      }\n      function processData(val) {\n        resolve(val);\n      }\n      for (let i = 0; i < promises.length; i++) {\n        const item = promises[i];\n        resolvePromise(item, i);\n      }\n    });\n  }\n  static all(promises) {\n    return new Promise((resolve, reject) => {\n      let arr = [],\n        index = 0,\n        len = promises.length;\n      function resolvePromise(val, index) {\n        if (isPromise(val)) {\n          val.then((data) => {\n            resolvePromise(data, index);\n          }, reject);\n        } else {\n          processData(val, index);\n        }\n      }\n      function processData(val, i) {\n        arr[i] = val;\n        if (len === ++index) {\n          resolve(arr);\n        }\n      }\n      for (let i = 0; i < promises.length; i++) {\n        const item = promises[i];\n        resolvePromise(item, i);\n      }\n    });\n  }\n}\n\n// 测试 需要测试再添加\nPromise.defer = Promise.deferred = function () {\n  let dfd = {};\n  dfd.promise = new Promise((resolve, reject) => {\n    dfd.resolve = resolve;\n    dfd.reject = reject;\n  });\n  return dfd;\n};\nmodule.exports = Promise;\n","site":{"data":{}},"excerpt":"","more":"const PENDING = \"PENDING\",\n  FULFILLED = \"FULFILLED\",\n  REJECTED = \"REJECTED\";\n\nfunction resolvePromise(promise2, x, resolve, reject) {\n  if (promise2 === x) {\n    reject(new TypeError(\"Chaining cycle detected for promise #<Promise>\"));\n  }\n  let called = false;\n\n  if ((typeof x === \"object\" && x !== null) || typeof x === \"function\") {\n    try {\n      //x.then 执行错误,抛出异常\n      let then = x.then;\n      if (typeof then === \"function\") {\n        then.call(\n          x,\n          (y) => {\n            //y是resolve中传递的值\n            if (called) return;\n            called = true;\n            resolvePromise(promise2, y, resolve, reject);\n          },\n          (r) => {\n            if (called) return;\n            called = true;\n            reject(r);\n          }\n        );\n      } else {\n        if (called) return;\n        called = true;\n        resolve(x);\n      }\n    } catch (error) {\n      if (called) return;\n      called = true;\n      reject(error);\n    }\n  } else {\n    resolve(x);\n  }\n}\n\nfunction isPromise(val) {\n  if ((typeof val === \"object\" && val !== null) || typeof val === \"function\") {\n    return typeof val.then === \"function\";\n  }\n  return false;\n}\n\nclass Promise {\n  constructor(executor) {\n    this.status = PENDING;\n    this.onFulfilledCallback = [];\n    this.onRejectedCallback = [];\n    let resolve = (value) => {\n      if (this.status === PENDING) {\n        if (value instanceof Promise) {\n          return value.then(resolve, reject);\n        }\n        this.value = value;\n        this.status = FULFILLED;\n        this.onFulfilledCallback.forEach((fn) => fn());\n      }\n    };\n    let reject = (reason) => {\n      if (this.status === PENDING) {\n        this.reason = reason;\n        this.status = REJECTED;\n        this.onRejectedCallback.forEach((fn) => fn());\n      }\n    };\n    try {\n      executor(resolve, reject);\n    } catch (error) {\n      reject(error);\n    }\n  }\n  then(onFulfilled, onRejected) {\n    onFulfilled =\n      typeof onFulfilled === \"function\" ? onFulfilled : (value) => value;\n    onRejected =\n      typeof onRejected === \"function\"\n        ? onRejected\n        : (err) => {\n            throw err;\n          };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.status === PENDING) {\n        this.onFulfilledCallback.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          });\n        });\n\n        this.onRejectedCallback.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          });\n        });\n      }\n      if (this.status === FULFILLED) {\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      }\n      if (this.status === REJECTED) {\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      }\n    });\n    return promise2;\n  }\n  catch(err) {\n    return this.then(null, () => {\n      throw err;\n    });\n  }\n  static resolve(val) {\n    return new Promise((resolve, reject) => {\n      resolve(val);\n    });\n  }\n  static reject(err) {\n    return new Promise((resolve, reject) => {\n      reject(err);\n    });\n  }\n  static race(promises) {\n    return new Promise((resolve, reject) => {\n      function resolvePromise(val) {\n        if (isPromise(val)) {\n          val.then((data) => {\n            resolvePromise(data);\n          }, reject);\n        } else {\n          processData(val);\n        }\n      }\n      function processData(val) {\n        resolve(val);\n      }\n      for (let i = 0; i < promises.length; i++) {\n        const item = promises[i];\n        resolvePromise(item, i);\n      }\n    });\n  }\n  static all(promises) {\n    return new Promise((resolve, reject) => {\n      let arr = [],\n        index = 0,\n        len = promises.length;\n      function resolvePromise(val, index) {\n        if (isPromise(val)) {\n          val.then((data) => {\n            resolvePromise(data, index);\n          }, reject);\n        } else {\n          processData(val, index);\n        }\n      }\n      function processData(val, i) {\n        arr[i] = val;\n        if (len === ++index) {\n          resolve(arr);\n        }\n      }\n      for (let i = 0; i < promises.length; i++) {\n        const item = promises[i];\n        resolvePromise(item, i);\n      }\n    });\n  }\n}\n\n// 测试 需要测试再添加\nPromise.defer = Promise.deferred = function () {\n  let dfd = {};\n  dfd.promise = new Promise((resolve, reject) => {\n    dfd.resolve = resolve;\n    dfd.reject = reject;\n  });\n  return dfd;\n};\nmodule.exports = Promise;\n"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    --- title: 随笔1 ---\n</body>\n\n</html>","source":"tags/随笔/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    --- title: 随笔1 ---\n</body>\n\n</html>","date":"2021-03-08T12:22:23.266Z","updated":"2021-03-08T12:22:23.266Z","path":"tags/随笔/index.html","_id":"ckm0k11tw0000ie9k423ma6tb","title":"","comments":1,"layout":"page","content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    --- title: 随笔1 ---\n</body>\n\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    --- title: 随笔1 ---\n</body>\n\n</html>"}],"Post":[{"title":"js工具函数","toc":true,"_content":"\n数组\n\n<!-- more -->\n\n### 布尔全等判断\n\n数组里面的值是不是都是布尔值\n\n```js\nconst all = (arr, fn = boolean) => arr.every(fn);\n```\n\n```js\nall([1, 2, 3], (x) => x > 1); // true\nall([1, 1, 1, 1]); // true\n```\n\n### 检查数组各项相等\n\n```js\nconst allEqual = (arr) => arr.every((val) => val === arr[0]);\n```\n\n```js\nallEqual([1, 2, 3, 4, 5]); // false\nallEqual([1, 1, 1, 1, 1, 1, 1]); // true\n```\n\n### 数组转‘CSV’格式（带空格的字符串）\n\n```js\nconst arrayToCSV = (arr, delimiter = \",\") =>\n  arr.map((v) => v.map((x) => `\"${x}\"`).join(delimiter)).join(\"\\n\");\n```\n\n更改写法\n\n```js\nconst arrayToCSV = function (arr, deli = \",\") {\n  return arr\n    .map((v) => {\n      return v\n        .map((x) => {\n          return `${x}`;\n        })\n        .join(deli);\n    })\n    .join(\"\\n\");\n};\n```\n","source":"_posts/javaScript/js.md","raw":"---\ntitle: js工具函数\ntag: js\ntoc: true\n---\n\n数组\n\n<!-- more -->\n\n### 布尔全等判断\n\n数组里面的值是不是都是布尔值\n\n```js\nconst all = (arr, fn = boolean) => arr.every(fn);\n```\n\n```js\nall([1, 2, 3], (x) => x > 1); // true\nall([1, 1, 1, 1]); // true\n```\n\n### 检查数组各项相等\n\n```js\nconst allEqual = (arr) => arr.every((val) => val === arr[0]);\n```\n\n```js\nallEqual([1, 2, 3, 4, 5]); // false\nallEqual([1, 1, 1, 1, 1, 1, 1]); // true\n```\n\n### 数组转‘CSV’格式（带空格的字符串）\n\n```js\nconst arrayToCSV = (arr, delimiter = \",\") =>\n  arr.map((v) => v.map((x) => `\"${x}\"`).join(delimiter)).join(\"\\n\");\n```\n\n更改写法\n\n```js\nconst arrayToCSV = function (arr, deli = \",\") {\n  return arr\n    .map((v) => {\n      return v\n        .map((x) => {\n          return `${x}`;\n        })\n        .join(deli);\n    })\n    .join(\"\\n\");\n};\n```\n","slug":"javaScript/js","published":1,"date":"2021-02-24T09:05:04.124Z","updated":"2021-02-24T12:32:20.715Z","_id":"cklj7qey40002bg9k44p18aiw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>数组</p>\n<a id=\"more\"></a>\n\n<h3 id=\"布尔全等判断\"><a href=\"#布尔全等判断\" class=\"headerlink\" title=\"布尔全等判断\"></a>布尔全等判断</h3><p>数组里面的值是不是都是布尔值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> all = <span class=\"function\">(<span class=\"params\">arr, fn = boolean</span>) =&gt;</span> arr.every(fn);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x &gt; <span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">all([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检查数组各项相等\"><a href=\"#检查数组各项相等\" class=\"headerlink\" title=\"检查数组各项相等\"></a>检查数组各项相等</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allEqual = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> arr.every(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> val === arr[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allEqual([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// false</span></span><br><span class=\"line\">allEqual([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组转‘CSV’格式（带空格的字符串）\"><a href=\"#数组转‘CSV’格式（带空格的字符串）\" class=\"headerlink\" title=\"数组转‘CSV’格式（带空格的字符串）\"></a>数组转‘CSV’格式（带空格的字符串）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayToCSV = <span class=\"function\">(<span class=\"params\">arr, delimiter = <span class=\"string\">&quot;,&quot;</span></span>) =&gt;</span></span><br><span class=\"line\">  arr.map(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> <span class=\"string\">`&quot;<span class=\"subst\">$&#123;x&#125;</span>&quot;`</span>).join(delimiter)).join(<span class=\"string\">&quot;\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>更改写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayToCSV = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, deli = <span class=\"string\">&quot;,&quot;</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    .map(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        .map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>`</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .join(deli);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .join(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>数组</p>","more":"<h3 id=\"布尔全等判断\"><a href=\"#布尔全等判断\" class=\"headerlink\" title=\"布尔全等判断\"></a>布尔全等判断</h3><p>数组里面的值是不是都是布尔值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> all = <span class=\"function\">(<span class=\"params\">arr, fn = boolean</span>) =&gt;</span> arr.every(fn);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x &gt; <span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">all([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检查数组各项相等\"><a href=\"#检查数组各项相等\" class=\"headerlink\" title=\"检查数组各项相等\"></a>检查数组各项相等</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allEqual = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> arr.every(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> val === arr[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allEqual([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// false</span></span><br><span class=\"line\">allEqual([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组转‘CSV’格式（带空格的字符串）\"><a href=\"#数组转‘CSV’格式（带空格的字符串）\" class=\"headerlink\" title=\"数组转‘CSV’格式（带空格的字符串）\"></a>数组转‘CSV’格式（带空格的字符串）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayToCSV = <span class=\"function\">(<span class=\"params\">arr, delimiter = <span class=\"string\">&quot;,&quot;</span></span>) =&gt;</span></span><br><span class=\"line\">  arr.map(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> <span class=\"string\">`&quot;<span class=\"subst\">$&#123;x&#125;</span>&quot;`</span>).join(delimiter)).join(<span class=\"string\">&quot;\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>更改写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayToCSV = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, deli = <span class=\"string\">&quot;,&quot;</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    .map(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        .map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>`</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .join(deli);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .join(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"hexo主题配置","toc":null,"_content":"\n主题：大道至简\n`https://www.haomwei.com/technology/maupassant-hexo.html`\n\n<!-- [主题配置](https://www.yyyyuans.com/hexo/themeSet/) -->\n\n在 maupassant 下 \\_config.yml 更新下列内容\n此为 maupassant 主题相关配置\n现用主题是别的哦～\n\n<!-- more -->\n\n——————————\n\n```\ndisqus:\n  enable: false ## If you want to use Disqus comment system, please set the value to true.\n  shortname: ## Your disqus_shortname, e.g. username\n  api: ## You can visit Disqus comments in China mainland without barriers using Disqus API, e.g. https://disqus.skk.moe/disqus/\n  apikey: ## Your API key obtained in Disqus API Application, e.g. yk00ZB1fjYGRkrCrDDRYDUjpp26GJWJiJRZQZ5SY0r3th5FMW6pnSzQMnWH7ua7r\n  admin: ## Username of your Disqus moderator, e.g. username\n  admin_label: ## The text of Disqus moderator badge, e.g. Mod\nuyan: ## Your uyan_id. e.g. 1234567\nlivere: ## Your livere data-uid, e.g. MTAyMC8zMDAxOC78NTgz\nchangyan: ## Your changyan appid, e.g. cyrALsXc8\nchangyan_conf: ## Your changyan conf, e.g. prod_d8a508c2825ab57eeb43e7c69bba0e8b\ngitalk: ## See: https://github.com/gitalk/gitalk\n  enable: false ## If you want to use Gitment comment system please set the value to true.\n  owner: ## Your GitHub ID, e.g. username\n  repo: ## The repository to store your comments, make sure you're the repo's owner, e.g. gitalk.github.io\n  client_id: ## GitHub client ID, e.g. 75752dafe7907a897619\n  client_secret: ## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50\n  admin: ## Github repo owner and collaborators, only these guys can initialize github issues.\nvaline: ## See: https://valine.js.org\n  enable: false ## If you want to use Valine comment system, please set the value to true.\n  appid: ## Your LeanCloud application App ID, e.g. pRBBL2JR4N7kLEGojrF0MsSs-gzGzoHsz\n  appkey: ## Your LeanCloud application App Key, e.g. tjczHpDfhjYDSYddzymYK1JJ\n  notify: false ## Mail notifier, see https://github.com/xCss/Valine/wiki/Valine-评论系统中的邮件提醒设置\n  verify: false ## Validation code.\n  placeholder: Just so so ## Comment box placeholders.\n  avatar: \"mm\" ## Gravatar type, see https://github.com/xCss/Valine/wiki/avatar-setting-for-valine\n  pageSize: 10 ## Number of comments per page.\n  guest_info: nick,mail,link ## Attributes of reviewers.\nminivaline: ## See: https://github.com/MiniValine/MiniValine\n  enable: false ## If you want to use MiniValine comment system, please set the value to true.\n  appId: ## Your LeanCloud application App ID, e.g. pRBBL2JR4N7kLEGojrF0MsSs-gzGzoHsz\n  appKey: ## Your LeanCloud application App Key, e.g. tjczHpDfhjYDSYddzymYK1JJ\n  placeholder: Write a Comment ## Comment box placeholder.\n  adminEmailMd5: ## The MD5 of Admin Email to show Admin Flag.\n  math: true ## Support MathJax.\n  md: true ## Support Markdown.\n  # MiniValine's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en  | zh-CN | (and many more)\n  # More i18n info: https://github.com/MiniValine/minivaline-i18n\n  lang:\nutterances: ## See: https://utteranc.es\n  enable: false ## If you want to use Utterances comment system, please set the value to true.\n  repo: ## The repository utterances will connect to, e.g. tufu9441/comments\n  identifier: title ## The mapping between blog posts and GitHub issues.\n  theme: github-light ## Choose an Utterances theme which matches your blog.\n\ngoogle_search: true ## Use Google search, true/false.\nbaidu_search: false ## Use Baidu search, true/false.\nswiftype: ## Your swiftype_key, e.g. m7b11ZrsT8Me7gzApciT\nself_search: false ## Use a jQuery-based local search engine, true/false.\ngoogle_analytics: ## Your Google Analytics tracking id, e.g. UA-42425684-2\nbaidu_analytics: ## Your Baidu Analytics tracking id, e.g. 8006843039519956000\nfancybox: true ## If you want to use fancybox please set the value to true.\nshow_category_count: false ## If you want to show the count of categories in the sidebar widget please set the value to true.\ntoc_number: true ## If you want to add list number to toc please set the value to true.\nshareto: false ## If you want to use the share button please set the value to true, and you must have hexo-helper-qrcode installed.\nbusuanzi: false ## If you want to use Busuanzi page views please set the value to true.\nwordcount: false ## If you want to display the word counter and the reading time expected to spend of each post please set the value to true, and you must have hexo-wordcount installed.\nwidgets_on_small_screens: false ## Set to true to enable widgets on small screens.\ncanvas_nest:\n  enable: false ## If you want to use dynamic background please set the value to true, you can also fill the following parameters to customize the dynamic effect, or just leave them blank to keep the default effect.\n  color: ## RGB value of the color, e.g. \"100,99,98\"\n  opacity: ## Transparency of lines, e.g. \"0.7\"\n  zIndex: ## The z-index property of the background, e.g. \"-1\"\n  count: ## Quantity of lines, e.g. \"150\"\ndonate:\n  enable: false ## If you want to display the donate button after each post, please set the value to true and fill the following items on your need. You can also enable donate button in a page by adding a \"donate: true\" item to the front-matter.\n  github: ## GitHub URL, e.g. https://github.com/Kaiyuan/donate-page\n  alipay_qr: ## Path of Alipay QRcode image, e.g. /img/AliPayQR.png\n  wechat_qr: ## Path of Wechat QRcode image, e.g. /img/WeChatQR.png\n  btc_qr: ## Path of Bitcoin QRcode image, e.g. /img/BTCQR.png\n  btc_key: ## Bitcoin key, e.g. 1KuK5eK2BLsqpsFVXXSBG5wbSAwZVadt6L\n  paypal_url: ## Paypal URL, e.g. https://www.paypal.me/tufu9441\npost_copyright:\n  enable: false ## If you want to display the copyright info after each post, please set the value to true and fill the following items on your need.\n  author: ## Your author name, e.g. tufu9441\n  copyright_text: ## Your copyright text, e.g. The author owns the copyright, please indicate the source reproduced.\nlove: false ## If you want the love to appear when you click anywhere, set the value to true.\nplantuml: ## Using PlantUML to generate UML diagram, must install hexo-filter-plantuml (https://github.com/miao1007/hexo-filter-plantuml).\n  render: \"PlantUMLServer\" ## Local or PlantUMLServer.\n  outputFormat: \"svg\" ## Common options: svg/png\ncopycode: true ## If you want to enable one-click copy of the code blocks, set the value to true.\ndark: false ## If you want to use the dark mode theme, set the value to true. Note: This feature is not complete, please open an issue if you have any problem.\ntotop: true ## If you want to use the rocketship button to return to the top, set the value to true.\nexternal_css: false ## If you want to load an external CSS file, set the value to true and create a file named \"external.css\" in the source/css folder.\n\nmenu:\n  - page: home\n    directory: .\n    icon: fa-home\n  - page: archive\n    directory: archives/\n    icon: fa-archive\n  - page: about\n    directory: about/\n    icon: fa-user\n## 订阅功能\n## - page: rss\n##directory: atom.xml\n##icon: fa-rss\n\n##- recent_comments   // 评论功能\nwidgets: ## Six widgets in sidebar provided: search, category, tag, recent_posts, recent_comments and links.\n  - search\n  - category\n  - tag\n  - recent_posts\n  - links\n\nlinks:\n  - title: 百度\n    url: http://www.baidu.com/\n  - title: 知乎\n    url: http://www.zhihu.com/\n  - title: 虎牙\n    url: http://www.huya.com/\n\ntimeline:\n  - num: 1\n    word: 2014/06/12-Start\n  - num: 2\n    word: 2014/11/29-XXX\n  - num: 3\n    word: 2015/02/18-DDD\n  - num: 4\n    word: More\n\n# Static files\njs: js\ncss: css\n\n# Theme version\nversion: 1.0.0\n# 注释了   source/js/fancybox.js 中部分内容解决了去掉评论功能所带来的bug\n```\n","source":"_posts/hexo/themeSet.md","raw":"---\ntitle: hexo主题配置\ntoc:\ntag: hexo\n---\n\n主题：大道至简\n`https://www.haomwei.com/technology/maupassant-hexo.html`\n\n<!-- [主题配置](https://www.yyyyuans.com/hexo/themeSet/) -->\n\n在 maupassant 下 \\_config.yml 更新下列内容\n此为 maupassant 主题相关配置\n现用主题是别的哦～\n\n<!-- more -->\n\n——————————\n\n```\ndisqus:\n  enable: false ## If you want to use Disqus comment system, please set the value to true.\n  shortname: ## Your disqus_shortname, e.g. username\n  api: ## You can visit Disqus comments in China mainland without barriers using Disqus API, e.g. https://disqus.skk.moe/disqus/\n  apikey: ## Your API key obtained in Disqus API Application, e.g. yk00ZB1fjYGRkrCrDDRYDUjpp26GJWJiJRZQZ5SY0r3th5FMW6pnSzQMnWH7ua7r\n  admin: ## Username of your Disqus moderator, e.g. username\n  admin_label: ## The text of Disqus moderator badge, e.g. Mod\nuyan: ## Your uyan_id. e.g. 1234567\nlivere: ## Your livere data-uid, e.g. MTAyMC8zMDAxOC78NTgz\nchangyan: ## Your changyan appid, e.g. cyrALsXc8\nchangyan_conf: ## Your changyan conf, e.g. prod_d8a508c2825ab57eeb43e7c69bba0e8b\ngitalk: ## See: https://github.com/gitalk/gitalk\n  enable: false ## If you want to use Gitment comment system please set the value to true.\n  owner: ## Your GitHub ID, e.g. username\n  repo: ## The repository to store your comments, make sure you're the repo's owner, e.g. gitalk.github.io\n  client_id: ## GitHub client ID, e.g. 75752dafe7907a897619\n  client_secret: ## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50\n  admin: ## Github repo owner and collaborators, only these guys can initialize github issues.\nvaline: ## See: https://valine.js.org\n  enable: false ## If you want to use Valine comment system, please set the value to true.\n  appid: ## Your LeanCloud application App ID, e.g. pRBBL2JR4N7kLEGojrF0MsSs-gzGzoHsz\n  appkey: ## Your LeanCloud application App Key, e.g. tjczHpDfhjYDSYddzymYK1JJ\n  notify: false ## Mail notifier, see https://github.com/xCss/Valine/wiki/Valine-评论系统中的邮件提醒设置\n  verify: false ## Validation code.\n  placeholder: Just so so ## Comment box placeholders.\n  avatar: \"mm\" ## Gravatar type, see https://github.com/xCss/Valine/wiki/avatar-setting-for-valine\n  pageSize: 10 ## Number of comments per page.\n  guest_info: nick,mail,link ## Attributes of reviewers.\nminivaline: ## See: https://github.com/MiniValine/MiniValine\n  enable: false ## If you want to use MiniValine comment system, please set the value to true.\n  appId: ## Your LeanCloud application App ID, e.g. pRBBL2JR4N7kLEGojrF0MsSs-gzGzoHsz\n  appKey: ## Your LeanCloud application App Key, e.g. tjczHpDfhjYDSYddzymYK1JJ\n  placeholder: Write a Comment ## Comment box placeholder.\n  adminEmailMd5: ## The MD5 of Admin Email to show Admin Flag.\n  math: true ## Support MathJax.\n  md: true ## Support Markdown.\n  # MiniValine's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en  | zh-CN | (and many more)\n  # More i18n info: https://github.com/MiniValine/minivaline-i18n\n  lang:\nutterances: ## See: https://utteranc.es\n  enable: false ## If you want to use Utterances comment system, please set the value to true.\n  repo: ## The repository utterances will connect to, e.g. tufu9441/comments\n  identifier: title ## The mapping between blog posts and GitHub issues.\n  theme: github-light ## Choose an Utterances theme which matches your blog.\n\ngoogle_search: true ## Use Google search, true/false.\nbaidu_search: false ## Use Baidu search, true/false.\nswiftype: ## Your swiftype_key, e.g. m7b11ZrsT8Me7gzApciT\nself_search: false ## Use a jQuery-based local search engine, true/false.\ngoogle_analytics: ## Your Google Analytics tracking id, e.g. UA-42425684-2\nbaidu_analytics: ## Your Baidu Analytics tracking id, e.g. 8006843039519956000\nfancybox: true ## If you want to use fancybox please set the value to true.\nshow_category_count: false ## If you want to show the count of categories in the sidebar widget please set the value to true.\ntoc_number: true ## If you want to add list number to toc please set the value to true.\nshareto: false ## If you want to use the share button please set the value to true, and you must have hexo-helper-qrcode installed.\nbusuanzi: false ## If you want to use Busuanzi page views please set the value to true.\nwordcount: false ## If you want to display the word counter and the reading time expected to spend of each post please set the value to true, and you must have hexo-wordcount installed.\nwidgets_on_small_screens: false ## Set to true to enable widgets on small screens.\ncanvas_nest:\n  enable: false ## If you want to use dynamic background please set the value to true, you can also fill the following parameters to customize the dynamic effect, or just leave them blank to keep the default effect.\n  color: ## RGB value of the color, e.g. \"100,99,98\"\n  opacity: ## Transparency of lines, e.g. \"0.7\"\n  zIndex: ## The z-index property of the background, e.g. \"-1\"\n  count: ## Quantity of lines, e.g. \"150\"\ndonate:\n  enable: false ## If you want to display the donate button after each post, please set the value to true and fill the following items on your need. You can also enable donate button in a page by adding a \"donate: true\" item to the front-matter.\n  github: ## GitHub URL, e.g. https://github.com/Kaiyuan/donate-page\n  alipay_qr: ## Path of Alipay QRcode image, e.g. /img/AliPayQR.png\n  wechat_qr: ## Path of Wechat QRcode image, e.g. /img/WeChatQR.png\n  btc_qr: ## Path of Bitcoin QRcode image, e.g. /img/BTCQR.png\n  btc_key: ## Bitcoin key, e.g. 1KuK5eK2BLsqpsFVXXSBG5wbSAwZVadt6L\n  paypal_url: ## Paypal URL, e.g. https://www.paypal.me/tufu9441\npost_copyright:\n  enable: false ## If you want to display the copyright info after each post, please set the value to true and fill the following items on your need.\n  author: ## Your author name, e.g. tufu9441\n  copyright_text: ## Your copyright text, e.g. The author owns the copyright, please indicate the source reproduced.\nlove: false ## If you want the love to appear when you click anywhere, set the value to true.\nplantuml: ## Using PlantUML to generate UML diagram, must install hexo-filter-plantuml (https://github.com/miao1007/hexo-filter-plantuml).\n  render: \"PlantUMLServer\" ## Local or PlantUMLServer.\n  outputFormat: \"svg\" ## Common options: svg/png\ncopycode: true ## If you want to enable one-click copy of the code blocks, set the value to true.\ndark: false ## If you want to use the dark mode theme, set the value to true. Note: This feature is not complete, please open an issue if you have any problem.\ntotop: true ## If you want to use the rocketship button to return to the top, set the value to true.\nexternal_css: false ## If you want to load an external CSS file, set the value to true and create a file named \"external.css\" in the source/css folder.\n\nmenu:\n  - page: home\n    directory: .\n    icon: fa-home\n  - page: archive\n    directory: archives/\n    icon: fa-archive\n  - page: about\n    directory: about/\n    icon: fa-user\n## 订阅功能\n## - page: rss\n##directory: atom.xml\n##icon: fa-rss\n\n##- recent_comments   // 评论功能\nwidgets: ## Six widgets in sidebar provided: search, category, tag, recent_posts, recent_comments and links.\n  - search\n  - category\n  - tag\n  - recent_posts\n  - links\n\nlinks:\n  - title: 百度\n    url: http://www.baidu.com/\n  - title: 知乎\n    url: http://www.zhihu.com/\n  - title: 虎牙\n    url: http://www.huya.com/\n\ntimeline:\n  - num: 1\n    word: 2014/06/12-Start\n  - num: 2\n    word: 2014/11/29-XXX\n  - num: 3\n    word: 2015/02/18-DDD\n  - num: 4\n    word: More\n\n# Static files\njs: js\ncss: css\n\n# Theme version\nversion: 1.0.0\n# 注释了   source/js/fancybox.js 中部分内容解决了去掉评论功能所带来的bug\n```\n","slug":"hexo/themeSet","published":1,"date":"2021-02-03T07:17:42.346Z","updated":"2021-02-24T12:41:07.618Z","_id":"cklj7scxu0004bg9kbmti2rrg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>主题：大道至简<br><code>https://www.haomwei.com/technology/maupassant-hexo.html</code></p>\n<!-- [主题配置](https://www.yyyyuans.com/hexo/themeSet/) -->\n\n<p>在 maupassant 下 _config.yml 更新下列内容<br>此为 maupassant 主题相关配置<br>现用主题是别的哦～</p>\n<a id=\"more\"></a>\n\n<p>——————————</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: false ## If you want to use Disqus comment system, please set the value to true.</span><br><span class=\"line\">  shortname: ## Your disqus_shortname, e.g. username</span><br><span class=\"line\">  api: ## You can visit Disqus comments in China mainland without barriers using Disqus API, e.g. https:&#x2F;&#x2F;disqus.skk.moe&#x2F;disqus&#x2F;</span><br><span class=\"line\">  apikey: ## Your API key obtained in Disqus API Application, e.g. yk00ZB1fjYGRkrCrDDRYDUjpp26GJWJiJRZQZ5SY0r3th5FMW6pnSzQMnWH7ua7r</span><br><span class=\"line\">  admin: ## Username of your Disqus moderator, e.g. username</span><br><span class=\"line\">  admin_label: ## The text of Disqus moderator badge, e.g. Mod</span><br><span class=\"line\">uyan: ## Your uyan_id. e.g. 1234567</span><br><span class=\"line\">livere: ## Your livere data-uid, e.g. MTAyMC8zMDAxOC78NTgz</span><br><span class=\"line\">changyan: ## Your changyan appid, e.g. cyrALsXc8</span><br><span class=\"line\">changyan_conf: ## Your changyan conf, e.g. prod_d8a508c2825ab57eeb43e7c69bba0e8b</span><br><span class=\"line\">gitalk: ## See: https:&#x2F;&#x2F;github.com&#x2F;gitalk&#x2F;gitalk</span><br><span class=\"line\">  enable: false ## If you want to use Gitment comment system please set the value to true.</span><br><span class=\"line\">  owner: ## Your GitHub ID, e.g. username</span><br><span class=\"line\">  repo: ## The repository to store your comments, make sure you&#39;re the repo&#39;s owner, e.g. gitalk.github.io</span><br><span class=\"line\">  client_id: ## GitHub client ID, e.g. 75752dafe7907a897619</span><br><span class=\"line\">  client_secret: ## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50</span><br><span class=\"line\">  admin: ## Github repo owner and collaborators, only these guys can initialize github issues.</span><br><span class=\"line\">valine: ## See: https:&#x2F;&#x2F;valine.js.org</span><br><span class=\"line\">  enable: false ## If you want to use Valine comment system, please set the value to true.</span><br><span class=\"line\">  appid: ## Your LeanCloud application App ID, e.g. pRBBL2JR4N7kLEGojrF0MsSs-gzGzoHsz</span><br><span class=\"line\">  appkey: ## Your LeanCloud application App Key, e.g. tjczHpDfhjYDSYddzymYK1JJ</span><br><span class=\"line\">  notify: false ## Mail notifier, see https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki&#x2F;Valine-评论系统中的邮件提醒设置</span><br><span class=\"line\">  verify: false ## Validation code.</span><br><span class=\"line\">  placeholder: Just so so ## Comment box placeholders.</span><br><span class=\"line\">  avatar: &quot;mm&quot; ## Gravatar type, see https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki&#x2F;avatar-setting-for-valine</span><br><span class=\"line\">  pageSize: 10 ## Number of comments per page.</span><br><span class=\"line\">  guest_info: nick,mail,link ## Attributes of reviewers.</span><br><span class=\"line\">minivaline: ## See: https:&#x2F;&#x2F;github.com&#x2F;MiniValine&#x2F;MiniValine</span><br><span class=\"line\">  enable: false ## If you want to use MiniValine comment system, please set the value to true.</span><br><span class=\"line\">  appId: ## Your LeanCloud application App ID, e.g. pRBBL2JR4N7kLEGojrF0MsSs-gzGzoHsz</span><br><span class=\"line\">  appKey: ## Your LeanCloud application App Key, e.g. tjczHpDfhjYDSYddzymYK1JJ</span><br><span class=\"line\">  placeholder: Write a Comment ## Comment box placeholder.</span><br><span class=\"line\">  adminEmailMd5: ## The MD5 of Admin Email to show Admin Flag.</span><br><span class=\"line\">  math: true ## Support MathJax.</span><br><span class=\"line\">  md: true ## Support Markdown.</span><br><span class=\"line\">  # MiniValine&#39;s display language depends on user&#39;s browser or system environment</span><br><span class=\"line\">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class=\"line\">  # Available values: en  | zh-CN | (and many more)</span><br><span class=\"line\">  # More i18n info: https:&#x2F;&#x2F;github.com&#x2F;MiniValine&#x2F;minivaline-i18n</span><br><span class=\"line\">  lang:</span><br><span class=\"line\">utterances: ## See: https:&#x2F;&#x2F;utteranc.es</span><br><span class=\"line\">  enable: false ## If you want to use Utterances comment system, please set the value to true.</span><br><span class=\"line\">  repo: ## The repository utterances will connect to, e.g. tufu9441&#x2F;comments</span><br><span class=\"line\">  identifier: title ## The mapping between blog posts and GitHub issues.</span><br><span class=\"line\">  theme: github-light ## Choose an Utterances theme which matches your blog.</span><br><span class=\"line\"></span><br><span class=\"line\">google_search: true ## Use Google search, true&#x2F;false.</span><br><span class=\"line\">baidu_search: false ## Use Baidu search, true&#x2F;false.</span><br><span class=\"line\">swiftype: ## Your swiftype_key, e.g. m7b11ZrsT8Me7gzApciT</span><br><span class=\"line\">self_search: false ## Use a jQuery-based local search engine, true&#x2F;false.</span><br><span class=\"line\">google_analytics: ## Your Google Analytics tracking id, e.g. UA-42425684-2</span><br><span class=\"line\">baidu_analytics: ## Your Baidu Analytics tracking id, e.g. 8006843039519956000</span><br><span class=\"line\">fancybox: true ## If you want to use fancybox please set the value to true.</span><br><span class=\"line\">show_category_count: false ## If you want to show the count of categories in the sidebar widget please set the value to true.</span><br><span class=\"line\">toc_number: true ## If you want to add list number to toc please set the value to true.</span><br><span class=\"line\">shareto: false ## If you want to use the share button please set the value to true, and you must have hexo-helper-qrcode installed.</span><br><span class=\"line\">busuanzi: false ## If you want to use Busuanzi page views please set the value to true.</span><br><span class=\"line\">wordcount: false ## If you want to display the word counter and the reading time expected to spend of each post please set the value to true, and you must have hexo-wordcount installed.</span><br><span class=\"line\">widgets_on_small_screens: false ## Set to true to enable widgets on small screens.</span><br><span class=\"line\">canvas_nest:</span><br><span class=\"line\">  enable: false ## If you want to use dynamic background please set the value to true, you can also fill the following parameters to customize the dynamic effect, or just leave them blank to keep the default effect.</span><br><span class=\"line\">  color: ## RGB value of the color, e.g. &quot;100,99,98&quot;</span><br><span class=\"line\">  opacity: ## Transparency of lines, e.g. &quot;0.7&quot;</span><br><span class=\"line\">  zIndex: ## The z-index property of the background, e.g. &quot;-1&quot;</span><br><span class=\"line\">  count: ## Quantity of lines, e.g. &quot;150&quot;</span><br><span class=\"line\">donate:</span><br><span class=\"line\">  enable: false ## If you want to display the donate button after each post, please set the value to true and fill the following items on your need. You can also enable donate button in a page by adding a &quot;donate: true&quot; item to the front-matter.</span><br><span class=\"line\">  github: ## GitHub URL, e.g. https:&#x2F;&#x2F;github.com&#x2F;Kaiyuan&#x2F;donate-page</span><br><span class=\"line\">  alipay_qr: ## Path of Alipay QRcode image, e.g. &#x2F;img&#x2F;AliPayQR.png</span><br><span class=\"line\">  wechat_qr: ## Path of Wechat QRcode image, e.g. &#x2F;img&#x2F;WeChatQR.png</span><br><span class=\"line\">  btc_qr: ## Path of Bitcoin QRcode image, e.g. &#x2F;img&#x2F;BTCQR.png</span><br><span class=\"line\">  btc_key: ## Bitcoin key, e.g. 1KuK5eK2BLsqpsFVXXSBG5wbSAwZVadt6L</span><br><span class=\"line\">  paypal_url: ## Paypal URL, e.g. https:&#x2F;&#x2F;www.paypal.me&#x2F;tufu9441</span><br><span class=\"line\">post_copyright:</span><br><span class=\"line\">  enable: false ## If you want to display the copyright info after each post, please set the value to true and fill the following items on your need.</span><br><span class=\"line\">  author: ## Your author name, e.g. tufu9441</span><br><span class=\"line\">  copyright_text: ## Your copyright text, e.g. The author owns the copyright, please indicate the source reproduced.</span><br><span class=\"line\">love: false ## If you want the love to appear when you click anywhere, set the value to true.</span><br><span class=\"line\">plantuml: ## Using PlantUML to generate UML diagram, must install hexo-filter-plantuml (https:&#x2F;&#x2F;github.com&#x2F;miao1007&#x2F;hexo-filter-plantuml).</span><br><span class=\"line\">  render: &quot;PlantUMLServer&quot; ## Local or PlantUMLServer.</span><br><span class=\"line\">  outputFormat: &quot;svg&quot; ## Common options: svg&#x2F;png</span><br><span class=\"line\">copycode: true ## If you want to enable one-click copy of the code blocks, set the value to true.</span><br><span class=\"line\">dark: false ## If you want to use the dark mode theme, set the value to true. Note: This feature is not complete, please open an issue if you have any problem.</span><br><span class=\"line\">totop: true ## If you want to use the rocketship button to return to the top, set the value to true.</span><br><span class=\"line\">external_css: false ## If you want to load an external CSS file, set the value to true and create a file named &quot;external.css&quot; in the source&#x2F;css folder.</span><br><span class=\"line\"></span><br><span class=\"line\">menu:</span><br><span class=\"line\">  - page: home</span><br><span class=\"line\">    directory: .</span><br><span class=\"line\">    icon: fa-home</span><br><span class=\"line\">  - page: archive</span><br><span class=\"line\">    directory: archives&#x2F;</span><br><span class=\"line\">    icon: fa-archive</span><br><span class=\"line\">  - page: about</span><br><span class=\"line\">    directory: about&#x2F;</span><br><span class=\"line\">    icon: fa-user</span><br><span class=\"line\">## 订阅功能</span><br><span class=\"line\">## - page: rss</span><br><span class=\"line\">##directory: atom.xml</span><br><span class=\"line\">##icon: fa-rss</span><br><span class=\"line\"></span><br><span class=\"line\">##- recent_comments   &#x2F;&#x2F; 评论功能</span><br><span class=\"line\">widgets: ## Six widgets in sidebar provided: search, category, tag, recent_posts, recent_comments and links.</span><br><span class=\"line\">  - search</span><br><span class=\"line\">  - category</span><br><span class=\"line\">  - tag</span><br><span class=\"line\">  - recent_posts</span><br><span class=\"line\">  - links</span><br><span class=\"line\"></span><br><span class=\"line\">links:</span><br><span class=\"line\">  - title: 百度</span><br><span class=\"line\">    url: http:&#x2F;&#x2F;www.baidu.com&#x2F;</span><br><span class=\"line\">  - title: 知乎</span><br><span class=\"line\">    url: http:&#x2F;&#x2F;www.zhihu.com&#x2F;</span><br><span class=\"line\">  - title: 虎牙</span><br><span class=\"line\">    url: http:&#x2F;&#x2F;www.huya.com&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">timeline:</span><br><span class=\"line\">  - num: 1</span><br><span class=\"line\">    word: 2014&#x2F;06&#x2F;12-Start</span><br><span class=\"line\">  - num: 2</span><br><span class=\"line\">    word: 2014&#x2F;11&#x2F;29-XXX</span><br><span class=\"line\">  - num: 3</span><br><span class=\"line\">    word: 2015&#x2F;02&#x2F;18-DDD</span><br><span class=\"line\">  - num: 4</span><br><span class=\"line\">    word: More</span><br><span class=\"line\"></span><br><span class=\"line\"># Static files</span><br><span class=\"line\">js: js</span><br><span class=\"line\">css: css</span><br><span class=\"line\"></span><br><span class=\"line\"># Theme version</span><br><span class=\"line\">version: 1.0.0</span><br><span class=\"line\"># 注释了   source&#x2F;js&#x2F;fancybox.js 中部分内容解决了去掉评论功能所带来的bug</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>主题：大道至简<br><code>https://www.haomwei.com/technology/maupassant-hexo.html</code></p>\n<!-- [主题配置](https://www.yyyyuans.com/hexo/themeSet/) -->\n\n<p>在 maupassant 下 _config.yml 更新下列内容<br>此为 maupassant 主题相关配置<br>现用主题是别的哦～</p>","more":"<p>——————————</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: false ## If you want to use Disqus comment system, please set the value to true.</span><br><span class=\"line\">  shortname: ## Your disqus_shortname, e.g. username</span><br><span class=\"line\">  api: ## You can visit Disqus comments in China mainland without barriers using Disqus API, e.g. https:&#x2F;&#x2F;disqus.skk.moe&#x2F;disqus&#x2F;</span><br><span class=\"line\">  apikey: ## Your API key obtained in Disqus API Application, e.g. yk00ZB1fjYGRkrCrDDRYDUjpp26GJWJiJRZQZ5SY0r3th5FMW6pnSzQMnWH7ua7r</span><br><span class=\"line\">  admin: ## Username of your Disqus moderator, e.g. username</span><br><span class=\"line\">  admin_label: ## The text of Disqus moderator badge, e.g. Mod</span><br><span class=\"line\">uyan: ## Your uyan_id. e.g. 1234567</span><br><span class=\"line\">livere: ## Your livere data-uid, e.g. MTAyMC8zMDAxOC78NTgz</span><br><span class=\"line\">changyan: ## Your changyan appid, e.g. cyrALsXc8</span><br><span class=\"line\">changyan_conf: ## Your changyan conf, e.g. prod_d8a508c2825ab57eeb43e7c69bba0e8b</span><br><span class=\"line\">gitalk: ## See: https:&#x2F;&#x2F;github.com&#x2F;gitalk&#x2F;gitalk</span><br><span class=\"line\">  enable: false ## If you want to use Gitment comment system please set the value to true.</span><br><span class=\"line\">  owner: ## Your GitHub ID, e.g. username</span><br><span class=\"line\">  repo: ## The repository to store your comments, make sure you&#39;re the repo&#39;s owner, e.g. gitalk.github.io</span><br><span class=\"line\">  client_id: ## GitHub client ID, e.g. 75752dafe7907a897619</span><br><span class=\"line\">  client_secret: ## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50</span><br><span class=\"line\">  admin: ## Github repo owner and collaborators, only these guys can initialize github issues.</span><br><span class=\"line\">valine: ## See: https:&#x2F;&#x2F;valine.js.org</span><br><span class=\"line\">  enable: false ## If you want to use Valine comment system, please set the value to true.</span><br><span class=\"line\">  appid: ## Your LeanCloud application App ID, e.g. pRBBL2JR4N7kLEGojrF0MsSs-gzGzoHsz</span><br><span class=\"line\">  appkey: ## Your LeanCloud application App Key, e.g. tjczHpDfhjYDSYddzymYK1JJ</span><br><span class=\"line\">  notify: false ## Mail notifier, see https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki&#x2F;Valine-评论系统中的邮件提醒设置</span><br><span class=\"line\">  verify: false ## Validation code.</span><br><span class=\"line\">  placeholder: Just so so ## Comment box placeholders.</span><br><span class=\"line\">  avatar: &quot;mm&quot; ## Gravatar type, see https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki&#x2F;avatar-setting-for-valine</span><br><span class=\"line\">  pageSize: 10 ## Number of comments per page.</span><br><span class=\"line\">  guest_info: nick,mail,link ## Attributes of reviewers.</span><br><span class=\"line\">minivaline: ## See: https:&#x2F;&#x2F;github.com&#x2F;MiniValine&#x2F;MiniValine</span><br><span class=\"line\">  enable: false ## If you want to use MiniValine comment system, please set the value to true.</span><br><span class=\"line\">  appId: ## Your LeanCloud application App ID, e.g. pRBBL2JR4N7kLEGojrF0MsSs-gzGzoHsz</span><br><span class=\"line\">  appKey: ## Your LeanCloud application App Key, e.g. tjczHpDfhjYDSYddzymYK1JJ</span><br><span class=\"line\">  placeholder: Write a Comment ## Comment box placeholder.</span><br><span class=\"line\">  adminEmailMd5: ## The MD5 of Admin Email to show Admin Flag.</span><br><span class=\"line\">  math: true ## Support MathJax.</span><br><span class=\"line\">  md: true ## Support Markdown.</span><br><span class=\"line\">  # MiniValine&#39;s display language depends on user&#39;s browser or system environment</span><br><span class=\"line\">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class=\"line\">  # Available values: en  | zh-CN | (and many more)</span><br><span class=\"line\">  # More i18n info: https:&#x2F;&#x2F;github.com&#x2F;MiniValine&#x2F;minivaline-i18n</span><br><span class=\"line\">  lang:</span><br><span class=\"line\">utterances: ## See: https:&#x2F;&#x2F;utteranc.es</span><br><span class=\"line\">  enable: false ## If you want to use Utterances comment system, please set the value to true.</span><br><span class=\"line\">  repo: ## The repository utterances will connect to, e.g. tufu9441&#x2F;comments</span><br><span class=\"line\">  identifier: title ## The mapping between blog posts and GitHub issues.</span><br><span class=\"line\">  theme: github-light ## Choose an Utterances theme which matches your blog.</span><br><span class=\"line\"></span><br><span class=\"line\">google_search: true ## Use Google search, true&#x2F;false.</span><br><span class=\"line\">baidu_search: false ## Use Baidu search, true&#x2F;false.</span><br><span class=\"line\">swiftype: ## Your swiftype_key, e.g. m7b11ZrsT8Me7gzApciT</span><br><span class=\"line\">self_search: false ## Use a jQuery-based local search engine, true&#x2F;false.</span><br><span class=\"line\">google_analytics: ## Your Google Analytics tracking id, e.g. UA-42425684-2</span><br><span class=\"line\">baidu_analytics: ## Your Baidu Analytics tracking id, e.g. 8006843039519956000</span><br><span class=\"line\">fancybox: true ## If you want to use fancybox please set the value to true.</span><br><span class=\"line\">show_category_count: false ## If you want to show the count of categories in the sidebar widget please set the value to true.</span><br><span class=\"line\">toc_number: true ## If you want to add list number to toc please set the value to true.</span><br><span class=\"line\">shareto: false ## If you want to use the share button please set the value to true, and you must have hexo-helper-qrcode installed.</span><br><span class=\"line\">busuanzi: false ## If you want to use Busuanzi page views please set the value to true.</span><br><span class=\"line\">wordcount: false ## If you want to display the word counter and the reading time expected to spend of each post please set the value to true, and you must have hexo-wordcount installed.</span><br><span class=\"line\">widgets_on_small_screens: false ## Set to true to enable widgets on small screens.</span><br><span class=\"line\">canvas_nest:</span><br><span class=\"line\">  enable: false ## If you want to use dynamic background please set the value to true, you can also fill the following parameters to customize the dynamic effect, or just leave them blank to keep the default effect.</span><br><span class=\"line\">  color: ## RGB value of the color, e.g. &quot;100,99,98&quot;</span><br><span class=\"line\">  opacity: ## Transparency of lines, e.g. &quot;0.7&quot;</span><br><span class=\"line\">  zIndex: ## The z-index property of the background, e.g. &quot;-1&quot;</span><br><span class=\"line\">  count: ## Quantity of lines, e.g. &quot;150&quot;</span><br><span class=\"line\">donate:</span><br><span class=\"line\">  enable: false ## If you want to display the donate button after each post, please set the value to true and fill the following items on your need. You can also enable donate button in a page by adding a &quot;donate: true&quot; item to the front-matter.</span><br><span class=\"line\">  github: ## GitHub URL, e.g. https:&#x2F;&#x2F;github.com&#x2F;Kaiyuan&#x2F;donate-page</span><br><span class=\"line\">  alipay_qr: ## Path of Alipay QRcode image, e.g. &#x2F;img&#x2F;AliPayQR.png</span><br><span class=\"line\">  wechat_qr: ## Path of Wechat QRcode image, e.g. &#x2F;img&#x2F;WeChatQR.png</span><br><span class=\"line\">  btc_qr: ## Path of Bitcoin QRcode image, e.g. &#x2F;img&#x2F;BTCQR.png</span><br><span class=\"line\">  btc_key: ## Bitcoin key, e.g. 1KuK5eK2BLsqpsFVXXSBG5wbSAwZVadt6L</span><br><span class=\"line\">  paypal_url: ## Paypal URL, e.g. https:&#x2F;&#x2F;www.paypal.me&#x2F;tufu9441</span><br><span class=\"line\">post_copyright:</span><br><span class=\"line\">  enable: false ## If you want to display the copyright info after each post, please set the value to true and fill the following items on your need.</span><br><span class=\"line\">  author: ## Your author name, e.g. tufu9441</span><br><span class=\"line\">  copyright_text: ## Your copyright text, e.g. The author owns the copyright, please indicate the source reproduced.</span><br><span class=\"line\">love: false ## If you want the love to appear when you click anywhere, set the value to true.</span><br><span class=\"line\">plantuml: ## Using PlantUML to generate UML diagram, must install hexo-filter-plantuml (https:&#x2F;&#x2F;github.com&#x2F;miao1007&#x2F;hexo-filter-plantuml).</span><br><span class=\"line\">  render: &quot;PlantUMLServer&quot; ## Local or PlantUMLServer.</span><br><span class=\"line\">  outputFormat: &quot;svg&quot; ## Common options: svg&#x2F;png</span><br><span class=\"line\">copycode: true ## If you want to enable one-click copy of the code blocks, set the value to true.</span><br><span class=\"line\">dark: false ## If you want to use the dark mode theme, set the value to true. Note: This feature is not complete, please open an issue if you have any problem.</span><br><span class=\"line\">totop: true ## If you want to use the rocketship button to return to the top, set the value to true.</span><br><span class=\"line\">external_css: false ## If you want to load an external CSS file, set the value to true and create a file named &quot;external.css&quot; in the source&#x2F;css folder.</span><br><span class=\"line\"></span><br><span class=\"line\">menu:</span><br><span class=\"line\">  - page: home</span><br><span class=\"line\">    directory: .</span><br><span class=\"line\">    icon: fa-home</span><br><span class=\"line\">  - page: archive</span><br><span class=\"line\">    directory: archives&#x2F;</span><br><span class=\"line\">    icon: fa-archive</span><br><span class=\"line\">  - page: about</span><br><span class=\"line\">    directory: about&#x2F;</span><br><span class=\"line\">    icon: fa-user</span><br><span class=\"line\">## 订阅功能</span><br><span class=\"line\">## - page: rss</span><br><span class=\"line\">##directory: atom.xml</span><br><span class=\"line\">##icon: fa-rss</span><br><span class=\"line\"></span><br><span class=\"line\">##- recent_comments   &#x2F;&#x2F; 评论功能</span><br><span class=\"line\">widgets: ## Six widgets in sidebar provided: search, category, tag, recent_posts, recent_comments and links.</span><br><span class=\"line\">  - search</span><br><span class=\"line\">  - category</span><br><span class=\"line\">  - tag</span><br><span class=\"line\">  - recent_posts</span><br><span class=\"line\">  - links</span><br><span class=\"line\"></span><br><span class=\"line\">links:</span><br><span class=\"line\">  - title: 百度</span><br><span class=\"line\">    url: http:&#x2F;&#x2F;www.baidu.com&#x2F;</span><br><span class=\"line\">  - title: 知乎</span><br><span class=\"line\">    url: http:&#x2F;&#x2F;www.zhihu.com&#x2F;</span><br><span class=\"line\">  - title: 虎牙</span><br><span class=\"line\">    url: http:&#x2F;&#x2F;www.huya.com&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">timeline:</span><br><span class=\"line\">  - num: 1</span><br><span class=\"line\">    word: 2014&#x2F;06&#x2F;12-Start</span><br><span class=\"line\">  - num: 2</span><br><span class=\"line\">    word: 2014&#x2F;11&#x2F;29-XXX</span><br><span class=\"line\">  - num: 3</span><br><span class=\"line\">    word: 2015&#x2F;02&#x2F;18-DDD</span><br><span class=\"line\">  - num: 4</span><br><span class=\"line\">    word: More</span><br><span class=\"line\"></span><br><span class=\"line\"># Static files</span><br><span class=\"line\">js: js</span><br><span class=\"line\">css: css</span><br><span class=\"line\"></span><br><span class=\"line\"># Theme version</span><br><span class=\"line\">version: 1.0.0</span><br><span class=\"line\"># 注释了   source&#x2F;js&#x2F;fancybox.js 中部分内容解决了去掉评论功能所带来的bug</span><br></pre></td></tr></table></figure>"},{"title":"hexo基本设置","toc":true,"_content":"\n欢迎来到袁园的博客～\n\n<!--\n语法：\n[知乎](https://www.zhihu.com/) -关键词连接-\n\n-->\n<!-- more -->\n\n`$ sudo npm install -g hexo`\n本地安装 hexo\n\n本地 clone 地址：\n\n```\n$ git clone git@github.com:yybeaut/yybeaut.github.io.git\n```\n\n**敲重点**\n**切换到 hexos 分支上**\n\n<!-- 主题：大道至简\n`https://www.haomwei.com/technology/maupassant-hexo.html`\n[主题配置](https://www.yyyyuans.com/hexo/themeSet/) -->\n\n主题：yilia\n\n<!-- `https://github.com/litten/hexo-theme-yilia` -->\n\n[https://github.com/litten/hexo-theme-yilia 主题配置](https://github.com/litten/hexo-theme-yilia)\n\n完成后：\n`$ npm i`\n\n#### 基本维护命令\n\n```bash\n$ npm install hexo-deployer-git --save\n$ hexo c\n$ hexo g\n$ hexo d\n$ hexo clean && hexo g && hexo d\n```\n\n### hexo server\n\n```bash\n$ hexo server\n```\n\n### Generate static files\n\n```bash\n$ hexo generate\n$ hexo s\n```\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n","source":"_posts/hexo/hexoSet.md","raw":"---\ntitle: hexo基本设置\ntoc: true\ntag: hexo\n---\n\n欢迎来到袁园的博客～\n\n<!--\n语法：\n[知乎](https://www.zhihu.com/) -关键词连接-\n\n-->\n<!-- more -->\n\n`$ sudo npm install -g hexo`\n本地安装 hexo\n\n本地 clone 地址：\n\n```\n$ git clone git@github.com:yybeaut/yybeaut.github.io.git\n```\n\n**敲重点**\n**切换到 hexos 分支上**\n\n<!-- 主题：大道至简\n`https://www.haomwei.com/technology/maupassant-hexo.html`\n[主题配置](https://www.yyyyuans.com/hexo/themeSet/) -->\n\n主题：yilia\n\n<!-- `https://github.com/litten/hexo-theme-yilia` -->\n\n[https://github.com/litten/hexo-theme-yilia 主题配置](https://github.com/litten/hexo-theme-yilia)\n\n完成后：\n`$ npm i`\n\n#### 基本维护命令\n\n```bash\n$ npm install hexo-deployer-git --save\n$ hexo c\n$ hexo g\n$ hexo d\n$ hexo clean && hexo g && hexo d\n```\n\n### hexo server\n\n```bash\n$ hexo server\n```\n\n### Generate static files\n\n```bash\n$ hexo generate\n$ hexo s\n```\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n","slug":"hexo/hexoSet","published":1,"date":"2021-02-03T06:47:40.361Z","updated":"2021-02-24T12:35:34.372Z","_id":"cklj82zt2000bbg9k2i5ye1yj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>欢迎来到袁园的博客～</p>\n<!--\n语法：\n[知乎](https://www.zhihu.com/) -关键词连接-\n\n-->\n<a id=\"more\"></a>\n\n<p><code>$ sudo npm install -g hexo</code><br>本地安装 hexo</p>\n<p>本地 clone 地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github.com:yybeaut&#x2F;yybeaut.github.io.git</span><br></pre></td></tr></table></figure>\n<p><strong>敲重点</strong><br><strong>切换到 hexos 分支上</strong></p>\n<!-- 主题：大道至简\n`https://www.haomwei.com/technology/maupassant-hexo.html`\n[主题配置](https://www.yyyyuans.com/hexo/themeSet/) -->\n\n<p>主题：yilia</p>\n<!-- `https://github.com/litten/hexo-theme-yilia` -->\n\n<p><a href=\"https://github.com/litten/hexo-theme-yilia\">https://github.com/litten/hexo-theme-yilia 主题配置</a></p>\n<p>完成后：<br><code>$ npm i</code></p>\n<h4 id=\"基本维护命令\"><a href=\"#基本维护命令\" class=\"headerlink\" title=\"基本维护命令\"></a>基本维护命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br><span class=\"line\">$ hexo c</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br><span class=\"line\">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo-server\"><a href=\"#hexo-server\" class=\"headerlink\" title=\"hexo server\"></a>hexo server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>欢迎来到袁园的博客～</p>\n<!--\n语法：\n[知乎](https://www.zhihu.com/) -关键词连接-\n\n-->","more":"<p><code>$ sudo npm install -g hexo</code><br>本地安装 hexo</p>\n<p>本地 clone 地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github.com:yybeaut&#x2F;yybeaut.github.io.git</span><br></pre></td></tr></table></figure>\n<p><strong>敲重点</strong><br><strong>切换到 hexos 分支上</strong></p>\n<!-- 主题：大道至简\n`https://www.haomwei.com/technology/maupassant-hexo.html`\n[主题配置](https://www.yyyyuans.com/hexo/themeSet/) -->\n\n<p>主题：yilia</p>\n<!-- `https://github.com/litten/hexo-theme-yilia` -->\n\n<p><a href=\"https://github.com/litten/hexo-theme-yilia\">https://github.com/litten/hexo-theme-yilia 主题配置</a></p>\n<p>完成后：<br><code>$ npm i</code></p>\n<h4 id=\"基本维护命令\"><a href=\"#基本维护命令\" class=\"headerlink\" title=\"基本维护命令\"></a>基本维护命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br><span class=\"line\">$ hexo c</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br><span class=\"line\">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo-server\"><a href=\"#hexo-server\" class=\"headerlink\" title=\"hexo server\"></a>hexo server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>"},{"title":"hexo语法吧","_content":"\nmarkdown\n\n<!-- more -->\n\nMarkdown 目录：\n[TOC]\nMarkdown 标题：\n\n# 这是 H1\n\n`# 这是 H1`\n\n## 这是 H2\n\n`## 这是 H2`\n\n### 这是 H3\n\n`### 这是 H3`\n\nMarkdown 列表：\n\n- 列表项目\n  `- 列表项目`\n\n1. 列表项目\n   `1. 列表项目`\n\n*斜体*或*斜体*\n`*斜体*或*斜体*`\n**粗体**\n`**粗体**`\n**_加粗斜体_**\n`**_加粗斜体_**`\n~~删除线~~\n`~~删除线~~`\n\nMarkdown 插入链接：\n[链接文字](链接网址 \"标题\")\n`[链接文字](链接网址 \"标题\")`\n\nMarkdown 插入图片：\n![alt text](/path/my.jpeg)\n`![alt text](/path/my.jpeg)`\n\nMarkdown 插入代码块：\n`python #!/usr/bin/python3 print(\"Hello, World!\"); `\n\nMarkdown 引用：\n\n> 引用内容\n\n`>` 引用符\n\n## Markdown 分割线：\n\nMarkdown 换行：\n`<br>`\n\nMarkdown 段首缩进：\n`&ensp; or &#8194;` 表示一个半角的空格\n`&emsp; or &#8195;` 表示一个全角的空格\n`&emsp;&emsp;` 两个全角的空格（用的比较多）\n`&nbsp; or &#160;` 不断行的空白格\n","source":"_posts/hexo/change.md","raw":"---\ntitle: hexo语法吧\n---\n\nmarkdown\n\n<!-- more -->\n\nMarkdown 目录：\n[TOC]\nMarkdown 标题：\n\n# 这是 H1\n\n`# 这是 H1`\n\n## 这是 H2\n\n`## 这是 H2`\n\n### 这是 H3\n\n`### 这是 H3`\n\nMarkdown 列表：\n\n- 列表项目\n  `- 列表项目`\n\n1. 列表项目\n   `1. 列表项目`\n\n*斜体*或*斜体*\n`*斜体*或*斜体*`\n**粗体**\n`**粗体**`\n**_加粗斜体_**\n`**_加粗斜体_**`\n~~删除线~~\n`~~删除线~~`\n\nMarkdown 插入链接：\n[链接文字](链接网址 \"标题\")\n`[链接文字](链接网址 \"标题\")`\n\nMarkdown 插入图片：\n![alt text](/path/my.jpeg)\n`![alt text](/path/my.jpeg)`\n\nMarkdown 插入代码块：\n`python #!/usr/bin/python3 print(\"Hello, World!\"); `\n\nMarkdown 引用：\n\n> 引用内容\n\n`>` 引用符\n\n## Markdown 分割线：\n\nMarkdown 换行：\n`<br>`\n\nMarkdown 段首缩进：\n`&ensp; or &#8194;` 表示一个半角的空格\n`&emsp; or &#8195;` 表示一个全角的空格\n`&emsp;&emsp;` 两个全角的空格（用的比较多）\n`&nbsp; or &#160;` 不断行的空白格\n","slug":"hexo/change","published":1,"date":"2021-02-24T09:25:19.795Z","updated":"2021-02-24T12:54:14.719Z","_id":"cklj8h3wp0007x69k26yife0b","comments":1,"layout":"post","photos":[],"link":"","content":"<p>markdown</p>\n<a id=\"more\"></a>\n\n<p>Markdown 目录：<br>[TOC]<br>Markdown 标题：</p>\n<h1 id=\"这是-H1\"><a href=\"#这是-H1\" class=\"headerlink\" title=\"这是 H1\"></a>这是 H1</h1><p><code># 这是 H1</code></p>\n<h2 id=\"这是-H2\"><a href=\"#这是-H2\" class=\"headerlink\" title=\"这是 H2\"></a>这是 H2</h2><p><code>## 这是 H2</code></p>\n<h3 id=\"这是-H3\"><a href=\"#这是-H3\" class=\"headerlink\" title=\"这是 H3\"></a>这是 H3</h3><p><code>### 这是 H3</code></p>\n<p>Markdown 列表：</p>\n<ul>\n<li>列表项目<br><code>- 列表项目</code></li>\n</ul>\n<ol>\n<li>列表项目<br><code>1. 列表项目</code></li>\n</ol>\n<p><em>斜体</em>或<em>斜体</em><br><code>*斜体*或*斜体*</code><br><strong>粗体</strong><br><code>**粗体**</code><br><strong><em>加粗斜体</em></strong><br><code>**_加粗斜体_**</code><br><del>删除线</del><br><code>~~删除线~~</code></p>\n<p>Markdown 插入链接：<br><a href=\"%E9%93%BE%E6%8E%A5%E7%BD%91%E5%9D%80\" title=\"标题\">链接文字</a><br><code>[链接文字](链接网址 &quot;标题&quot;)</code></p>\n<p>Markdown 插入图片：<br><img src=\"/path/my.jpeg\" alt=\"alt text\"><br><code>![alt text](/path/my.jpeg)</code></p>\n<p>Markdown 插入代码块：<br><code>python #!/usr/bin/python3 print(&quot;Hello, World!&quot;); </code></p>\n<p>Markdown 引用：</p>\n<blockquote>\n<p>引用内容</p>\n</blockquote>\n<p><code>&gt;</code> 引用符</p>\n<h2 id=\"Markdown-分割线：\"><a href=\"#Markdown-分割线：\" class=\"headerlink\" title=\"Markdown 分割线：\"></a>Markdown 分割线：</h2><p>Markdown 换行：<br><code>&lt;br&gt;</code></p>\n<p>Markdown 段首缩进：<br><code>&amp;ensp; or &amp;#8194;</code> 表示一个半角的空格<br><code>&amp;emsp; or &amp;#8195;</code> 表示一个全角的空格<br><code>&amp;emsp;&amp;emsp;</code> 两个全角的空格（用的比较多）<br><code>&amp;nbsp; or &amp;#160;</code> 不断行的空白格</p>\n","site":{"data":{}},"excerpt":"<p>markdown</p>","more":"<p>Markdown 目录：<br>[TOC]<br>Markdown 标题：</p>\n<h1 id=\"这是-H1\"><a href=\"#这是-H1\" class=\"headerlink\" title=\"这是 H1\"></a>这是 H1</h1><p><code># 这是 H1</code></p>\n<h2 id=\"这是-H2\"><a href=\"#这是-H2\" class=\"headerlink\" title=\"这是 H2\"></a>这是 H2</h2><p><code>## 这是 H2</code></p>\n<h3 id=\"这是-H3\"><a href=\"#这是-H3\" class=\"headerlink\" title=\"这是 H3\"></a>这是 H3</h3><p><code>### 这是 H3</code></p>\n<p>Markdown 列表：</p>\n<ul>\n<li>列表项目<br><code>- 列表项目</code></li>\n</ul>\n<ol>\n<li>列表项目<br><code>1. 列表项目</code></li>\n</ol>\n<p><em>斜体</em>或<em>斜体</em><br><code>*斜体*或*斜体*</code><br><strong>粗体</strong><br><code>**粗体**</code><br><strong><em>加粗斜体</em></strong><br><code>**_加粗斜体_**</code><br><del>删除线</del><br><code>~~删除线~~</code></p>\n<p>Markdown 插入链接：<br><a href=\"%E9%93%BE%E6%8E%A5%E7%BD%91%E5%9D%80\" title=\"标题\">链接文字</a><br><code>[链接文字](链接网址 &quot;标题&quot;)</code></p>\n<p>Markdown 插入图片：<br><img src=\"/path/my.jpeg\" alt=\"alt text\"><br><code>![alt text](/path/my.jpeg)</code></p>\n<p>Markdown 插入代码块：<br><code>python #!/usr/bin/python3 print(&quot;Hello, World!&quot;); </code></p>\n<p>Markdown 引用：</p>\n<blockquote>\n<p>引用内容</p>\n</blockquote>\n<p><code>&gt;</code> 引用符</p>\n<h2 id=\"Markdown-分割线：\"><a href=\"#Markdown-分割线：\" class=\"headerlink\" title=\"Markdown 分割线：\"></a>Markdown 分割线：</h2><p>Markdown 换行：<br><code>&lt;br&gt;</code></p>\n<p>Markdown 段首缩进：<br><code>&amp;ensp; or &amp;#8194;</code> 表示一个半角的空格<br><code>&amp;emsp; or &amp;#8195;</code> 表示一个全角的空格<br><code>&amp;emsp;&amp;emsp;</code> 两个全角的空格（用的比较多）<br><code>&amp;nbsp; or &amp;#160;</code> 不断行的空白格</p>"},{"title":"使用class手写一个promise","toc":true,"_content":"\n基本实现promise\n<!-- more -->\n## 不能链式调用\n```js\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        //         executor异常处理\n        // 当执行异步操作时有可能发生异常，需要try/catch捕获到异常，并使promise进入rejected状态\n        try {\n            executor(this._resolve.bind(this), this._reject.bind(this));\n        } catch (c) {\n            this._reject(error);\n            // throw new Error('error')\n        }\n    }\n    _resolve(value) {\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    _reject(reason) {\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    playHandler(callback) {\n        let {\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.onFulfilled && onFulfilled) {\n            onFulfilled(this.value);\n        }\n        if (this.status === Promise.onRejected && onRejected) {\n            onRejected(this.reason);\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        this.callbacks.push({\n            onFulfilled,\n            onRejected\n        })\n    }\n}\n// 实例例子\nlet success = false;\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('righht');\n        } else {\n            reject('error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n}, (error) => {\n    console.log(error, 'error');\n});\n// then的第二个参数执行错误\n/**\n * .then(()=>{},()=>{})\n */\n\n```\n\n## 能链式调用\n链式调用原理本质是then 返回了一个new Promise()对象\n```js\n\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        executor(this._resolve.bind(this), this._reject.bind(this));\n\n    }\n    _resolve(value) {\n        // 处理onFulfilled 执行的是一个promise时的情况\n        if (value instanceof Promise) {\n            //value instanceof Promise 当前的（value）promise不是第一个promise 是then方法返回值中的 promise（要处理的promise）\n            // 获取到value（promise）中的 value ：传递一个函数作为value.then()的 onFulfilled参数\n            // value内部会执行这个函数，当前promise的value赋值为value（promise）的value\n            // 【value：promise】.then(【this._resolve.bind(this)：value】, 【this._reject.bind(this)：value】)\n            value.then(this._resolve.bind(this), this._reject.bind(this))\n            return;\n        }\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    _reject(reason) {\n        if (reason instanceof Promise) {\n            reason.then(this._resolve.bind(this), this._reject.bind(this));\n            return;\n        }\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    playHandler(callback) {\n        let {\n            nextResolve,\n            nextReject,\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.pending) {\n            this.callbacks.push(callback);\n            return;\n        }\n        // if (this.status === Promise.onFulfilled && onFulfilled) {\n        //     onFulfilled(this.value);\n        // }\n        if (this.status === Promise.onFulfilled) {\n            // 没有传入 onFulfilled（回调事件） new Pronise() 没有调用 resolve() 将undefined 传入\n            // const nextValue = onFulfilled ? onFulfilled(this.value) : undefined;\n\n            // 传入存储的值\n            // 未传入onFulfilled时，value传入\n            const nextValue = onFulfilled ? onFulfilled(this.value) : this.value;\n\n            nextResolve(nextValue)\n            return;\n        }\n        // if (this.status === Promise.onRejected && onRejected) {\n        //     onRejected(this.reason);\n        // }\n        if (this.status === Promise.onRejected) {\n            // const nextReason = onRejected ? onRejected(this.reason) : undefined;\n            const nextReason = onRejected ? onRejected(this.reason) : this.reason;\n\n            nextReject(nextReason)\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        // this.callbacks.push({\n        //     onFulfilled,\n        //     onRejected\n        // })\n        // !!!!这里之所以把下一个Promsie的resolve函数和reject函数也存在callback中\n        // !!!!是为了将onFulfilled的执行结果通过nextResolve传入到下一个Promise作为它的value值\n        return new Promise((nextResolve, nextReject) => {\n            this.playHandler({\n                nextResolve,\n                nextReject,\n                onFulfilled,\n                onRejected\n            })\n        })\n    }\n}\nlet success = false;\n// let success = true;\n\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('一次resolve');\n        } else {\n            reject('一次错误error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n    return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(data + 'resolve()调用新的Promise')\n            }, 1000)\n        })\n        // return '二次调用then';\n}, (error) => {\n    console.log(error, 'error');\n    return 'then-> err'\n}).then(data => {\n    console.log(data, '链式调用then')\n}, error => {\n    console.log(error + '  链式调用reject()')\n});\n// then的第二个参数执行reject返回值\n/**\n * .then(()=>{},()=>{})\n */\n```","source":"_posts/Promise/setClassPromise.md","raw":"---\ntitle: 使用class手写一个promise\ntag: promise\ntoc: true\n---\n\n基本实现promise\n<!-- more -->\n## 不能链式调用\n```js\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        //         executor异常处理\n        // 当执行异步操作时有可能发生异常，需要try/catch捕获到异常，并使promise进入rejected状态\n        try {\n            executor(this._resolve.bind(this), this._reject.bind(this));\n        } catch (c) {\n            this._reject(error);\n            // throw new Error('error')\n        }\n    }\n    _resolve(value) {\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    _reject(reason) {\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => {\n            this.playHandler(arr);\n        });\n    }\n    playHandler(callback) {\n        let {\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.onFulfilled && onFulfilled) {\n            onFulfilled(this.value);\n        }\n        if (this.status === Promise.onRejected && onRejected) {\n            onRejected(this.reason);\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        this.callbacks.push({\n            onFulfilled,\n            onRejected\n        })\n    }\n}\n// 实例例子\nlet success = false;\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('righht');\n        } else {\n            reject('error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n}, (error) => {\n    console.log(error, 'error');\n});\n// then的第二个参数执行错误\n/**\n * .then(()=>{},()=>{})\n */\n\n```\n\n## 能链式调用\n链式调用原理本质是then 返回了一个new Promise()对象\n```js\n\nclass Promise {\n    static pending = 'pending';\n    static onFulfilled = 'fulfilled';\n    static onRejected = 'rejected';\n    constructor(executor) {\n        this.status = Promise.pending; // 默人状态\n        this.value = undefined; // 成功的默认值\n        this.reason = undefined; // 失败的默认值\n\n        // 存储then中传入的参数  数组是因为then方法可以多次调用\n        this.callbacks = [];\n        executor(this._resolve.bind(this), this._reject.bind(this));\n\n    }\n    _resolve(value) {\n        // 处理onFulfilled 执行的是一个promise时的情况\n        if (value instanceof Promise) {\n            //value instanceof Promise 当前的（value）promise不是第一个promise 是then方法返回值中的 promise（要处理的promise）\n            // 获取到value（promise）中的 value ：传递一个函数作为value.then()的 onFulfilled参数\n            // value内部会执行这个函数，当前promise的value赋值为value（promise）的value\n            // 【value：promise】.then(【this._resolve.bind(this)：value】, 【this._reject.bind(this)：value】)\n            value.then(this._resolve.bind(this), this._reject.bind(this))\n            return;\n        }\n        this.status = Promise.onFulfilled; // 将状态设置为成功\n        this.value = value;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    _reject(reason) {\n        if (reason instanceof Promise) {\n            reason.then(this._resolve.bind(this), this._reject.bind(this));\n            return;\n        }\n        this.status = Promise.onRejected; // 将状态设置为失败\n        this.reason = reason;\n        this.callbacks.forEach(arr => this.playHandler(arr));\n    }\n    playHandler(callback) {\n        let {\n            nextResolve,\n            nextReject,\n            onFulfilled,\n            onRejected\n        } = callback;\n        if (this.status === Promise.pending) {\n            this.callbacks.push(callback);\n            return;\n        }\n        // if (this.status === Promise.onFulfilled && onFulfilled) {\n        //     onFulfilled(this.value);\n        // }\n        if (this.status === Promise.onFulfilled) {\n            // 没有传入 onFulfilled（回调事件） new Pronise() 没有调用 resolve() 将undefined 传入\n            // const nextValue = onFulfilled ? onFulfilled(this.value) : undefined;\n\n            // 传入存储的值\n            // 未传入onFulfilled时，value传入\n            const nextValue = onFulfilled ? onFulfilled(this.value) : this.value;\n\n            nextResolve(nextValue)\n            return;\n        }\n        // if (this.status === Promise.onRejected && onRejected) {\n        //     onRejected(this.reason);\n        // }\n        if (this.status === Promise.onRejected) {\n            // const nextReason = onRejected ? onRejected(this.reason) : undefined;\n            const nextReason = onRejected ? onRejected(this.reason) : this.reason;\n\n            nextReject(nextReason)\n        }\n    }\n    then(onFulfilled, onRejected) {\n        // 这里可以理解为在注册事件\n        // 也就是将需要执行的回调函数存储起来\n        // this.callbacks.push({\n        //     onFulfilled,\n        //     onRejected\n        // })\n        // !!!!这里之所以把下一个Promsie的resolve函数和reject函数也存在callback中\n        // !!!!是为了将onFulfilled的执行结果通过nextResolve传入到下一个Promise作为它的value值\n        return new Promise((nextResolve, nextReject) => {\n            this.playHandler({\n                nextResolve,\n                nextReject,\n                onFulfilled,\n                onRejected\n            })\n        })\n    }\n}\nlet success = false;\n// let success = true;\n\nnew Promise(function(resolve, reject) {\n    setTimeout(() => {\n        if (success) {\n            resolve('一次resolve');\n        } else {\n            reject('一次错误error')\n        }\n    }, 100)\n}).then((data) => {\n    console.log(data, 'data');\n    return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(data + 'resolve()调用新的Promise')\n            }, 1000)\n        })\n        // return '二次调用then';\n}, (error) => {\n    console.log(error, 'error');\n    return 'then-> err'\n}).then(data => {\n    console.log(data, '链式调用then')\n}, error => {\n    console.log(error + '  链式调用reject()')\n});\n// then的第二个参数执行reject返回值\n/**\n * .then(()=>{},()=>{})\n */\n```","slug":"Promise/setClassPromise","published":1,"date":"2021-03-04T07:33:54.111Z","updated":"2021-03-06T15:09:49.295Z","_id":"cklun5rcq0000k89k8d7p9bu1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>基本实现promise</p>\n<a id=\"more\"></a>\n<h2 id=\"不能链式调用\"><a href=\"#不能链式调用\" class=\"headerlink\" title=\"不能链式调用\"></a>不能链式调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> pending = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> onFulfilled = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> onRejected = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">executor</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.pending; <span class=\"comment\">// 默人状态</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>; <span class=\"comment\">// 成功的默认值</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>; <span class=\"comment\">// 失败的默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 存储then中传入的参数  数组是因为then方法可以多次调用</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks = [];</span><br><span class=\"line\">        <span class=\"comment\">//         executor异常处理</span></span><br><span class=\"line\">        <span class=\"comment\">// 当执行异步操作时有可能发生异常，需要try/catch捕获到异常，并使promise进入rejected状态</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            executor(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (c) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>._reject(error);</span><br><span class=\"line\">            <span class=\"comment\">// throw new Error(&#x27;error&#x27;)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">_resolve</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.onFulfilled; <span class=\"comment\">// 将状态设置为成功</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.playHandler(arr);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">_reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.onRejected; <span class=\"comment\">// 将状态设置为失败</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.playHandler(arr);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">playHandler</span>(<span class=\"params\">callback</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">            onFulfilled,</span><br><span class=\"line\">            onRejected</span><br><span class=\"line\">        &#125; = callback;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"built_in\">Promise</span>.onFulfilled &amp;&amp; onFulfilled) &#123;</span><br><span class=\"line\">            onFulfilled(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"built_in\">Promise</span>.onRejected &amp;&amp; onRejected) &#123;</span><br><span class=\"line\">            onRejected(<span class=\"built_in\">this</span>.reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里可以理解为在注册事件</span></span><br><span class=\"line\">        <span class=\"comment\">// 也就是将需要执行的回调函数存储起来</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks.push(&#123;</span><br><span class=\"line\">            onFulfilled,</span><br><span class=\"line\">            onRejected</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例例子</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> success = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">&#x27;righht&#x27;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            reject(<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data, <span class=\"string\">&#x27;data&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error, <span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// then的第二个参数执行错误</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * .then(()=&gt;&#123;&#125;,()=&gt;&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"能链式调用\"><a href=\"#能链式调用\" class=\"headerlink\" title=\"能链式调用\"></a>能链式调用</h2><p>链式调用原理本质是then 返回了一个new Promise()对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> pending = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> onFulfilled = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> onRejected = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">executor</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.pending; <span class=\"comment\">// 默人状态</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>; <span class=\"comment\">// 成功的默认值</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>; <span class=\"comment\">// 失败的默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 存储then中传入的参数  数组是因为then方法可以多次调用</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks = [];</span><br><span class=\"line\">        executor(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">_resolve</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理onFulfilled 执行的是一个promise时的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//value instanceof Promise 当前的（value）promise不是第一个promise 是then方法返回值中的 promise（要处理的promise）</span></span><br><span class=\"line\">            <span class=\"comment\">// 获取到value（promise）中的 value ：传递一个函数作为value.then()的 onFulfilled参数</span></span><br><span class=\"line\">            <span class=\"comment\">// value内部会执行这个函数，当前promise的value赋值为value（promise）的value</span></span><br><span class=\"line\">            <span class=\"comment\">// 【value：promise】.then(【this._resolve.bind(this)：value】, 【this._reject.bind(this)：value】)</span></span><br><span class=\"line\">            value.then(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.onFulfilled; <span class=\"comment\">// 将状态设置为成功</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"built_in\">this</span>.playHandler(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">_reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reason <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">            reason.then(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.onRejected; <span class=\"comment\">// 将状态设置为失败</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"built_in\">this</span>.playHandler(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">playHandler</span>(<span class=\"params\">callback</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">            nextResolve,</span><br><span class=\"line\">            nextReject,</span><br><span class=\"line\">            onFulfilled,</span><br><span class=\"line\">            onRejected</span><br><span class=\"line\">        &#125; = callback;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"built_in\">Promise</span>.pending) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.callbacks.push(callback);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// if (this.status === Promise.onFulfilled &amp;&amp; onFulfilled) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     onFulfilled(this.value);</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"built_in\">Promise</span>.onFulfilled) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 没有传入 onFulfilled（回调事件） new Pronise() 没有调用 resolve() 将undefined 传入</span></span><br><span class=\"line\">            <span class=\"comment\">// const nextValue = onFulfilled ? onFulfilled(this.value) : undefined;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 传入存储的值</span></span><br><span class=\"line\">            <span class=\"comment\">// 未传入onFulfilled时，value传入</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> nextValue = onFulfilled ? onFulfilled(<span class=\"built_in\">this</span>.value) : <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\"></span><br><span class=\"line\">            nextResolve(nextValue)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// if (this.status === Promise.onRejected &amp;&amp; onRejected) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     onRejected(this.reason);</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"built_in\">Promise</span>.onRejected) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// const nextReason = onRejected ? onRejected(this.reason) : undefined;</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> nextReason = onRejected ? onRejected(<span class=\"built_in\">this</span>.reason) : <span class=\"built_in\">this</span>.reason;</span><br><span class=\"line\"></span><br><span class=\"line\">            nextReject(nextReason)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里可以理解为在注册事件</span></span><br><span class=\"line\">        <span class=\"comment\">// 也就是将需要执行的回调函数存储起来</span></span><br><span class=\"line\">        <span class=\"comment\">// this.callbacks.push(&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     onFulfilled,</span></span><br><span class=\"line\">        <span class=\"comment\">//     onRejected</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">        <span class=\"comment\">// !!!!这里之所以把下一个Promsie的resolve函数和reject函数也存在callback中</span></span><br><span class=\"line\">        <span class=\"comment\">// !!!!是为了将onFulfilled的执行结果通过nextResolve传入到下一个Promise作为它的value值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">nextResolve, nextReject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.playHandler(&#123;</span><br><span class=\"line\">                nextResolve,</span><br><span class=\"line\">                nextReject,</span><br><span class=\"line\">                onFulfilled,</span><br><span class=\"line\">                onRejected</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> success = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// let success = true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">&#x27;一次resolve&#x27;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            reject(<span class=\"string\">&#x27;一次错误error&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data, <span class=\"string\">&#x27;data&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                resolve(data + <span class=\"string\">&#x27;resolve()调用新的Promise&#x27;</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// return &#x27;二次调用then&#x27;;</span></span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error, <span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;then-&gt; err&#x27;</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data, <span class=\"string\">&#x27;链式调用then&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error + <span class=\"string\">&#x27;  链式调用reject()&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// then的第二个参数执行reject返回值</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * .then(()=&gt;&#123;&#125;,()=&gt;&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>基本实现promise</p>","more":"<h2 id=\"不能链式调用\"><a href=\"#不能链式调用\" class=\"headerlink\" title=\"不能链式调用\"></a>不能链式调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> pending = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> onFulfilled = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> onRejected = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">executor</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.pending; <span class=\"comment\">// 默人状态</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>; <span class=\"comment\">// 成功的默认值</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>; <span class=\"comment\">// 失败的默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 存储then中传入的参数  数组是因为then方法可以多次调用</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks = [];</span><br><span class=\"line\">        <span class=\"comment\">//         executor异常处理</span></span><br><span class=\"line\">        <span class=\"comment\">// 当执行异步操作时有可能发生异常，需要try/catch捕获到异常，并使promise进入rejected状态</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            executor(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (c) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>._reject(error);</span><br><span class=\"line\">            <span class=\"comment\">// throw new Error(&#x27;error&#x27;)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">_resolve</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.onFulfilled; <span class=\"comment\">// 将状态设置为成功</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.playHandler(arr);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">_reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.onRejected; <span class=\"comment\">// 将状态设置为失败</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.playHandler(arr);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">playHandler</span>(<span class=\"params\">callback</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">            onFulfilled,</span><br><span class=\"line\">            onRejected</span><br><span class=\"line\">        &#125; = callback;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"built_in\">Promise</span>.onFulfilled &amp;&amp; onFulfilled) &#123;</span><br><span class=\"line\">            onFulfilled(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"built_in\">Promise</span>.onRejected &amp;&amp; onRejected) &#123;</span><br><span class=\"line\">            onRejected(<span class=\"built_in\">this</span>.reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里可以理解为在注册事件</span></span><br><span class=\"line\">        <span class=\"comment\">// 也就是将需要执行的回调函数存储起来</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks.push(&#123;</span><br><span class=\"line\">            onFulfilled,</span><br><span class=\"line\">            onRejected</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例例子</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> success = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">&#x27;righht&#x27;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            reject(<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data, <span class=\"string\">&#x27;data&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error, <span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// then的第二个参数执行错误</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * .then(()=&gt;&#123;&#125;,()=&gt;&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"能链式调用\"><a href=\"#能链式调用\" class=\"headerlink\" title=\"能链式调用\"></a>能链式调用</h2><p>链式调用原理本质是then 返回了一个new Promise()对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> pending = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> onFulfilled = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> onRejected = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">executor</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.pending; <span class=\"comment\">// 默人状态</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>; <span class=\"comment\">// 成功的默认值</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>; <span class=\"comment\">// 失败的默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 存储then中传入的参数  数组是因为then方法可以多次调用</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks = [];</span><br><span class=\"line\">        executor(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">_resolve</span>(<span class=\"params\">value</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理onFulfilled 执行的是一个promise时的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//value instanceof Promise 当前的（value）promise不是第一个promise 是then方法返回值中的 promise（要处理的promise）</span></span><br><span class=\"line\">            <span class=\"comment\">// 获取到value（promise）中的 value ：传递一个函数作为value.then()的 onFulfilled参数</span></span><br><span class=\"line\">            <span class=\"comment\">// value内部会执行这个函数，当前promise的value赋值为value（promise）的value</span></span><br><span class=\"line\">            <span class=\"comment\">// 【value：promise】.then(【this._resolve.bind(this)：value】, 【this._reject.bind(this)：value】)</span></span><br><span class=\"line\">            value.then(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.onFulfilled; <span class=\"comment\">// 将状态设置为成功</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"built_in\">this</span>.playHandler(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">_reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reason <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">            reason.then(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = <span class=\"built_in\">Promise</span>.onRejected; <span class=\"comment\">// 将状态设置为失败</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"built_in\">this</span>.playHandler(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">playHandler</span>(<span class=\"params\">callback</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">            nextResolve,</span><br><span class=\"line\">            nextReject,</span><br><span class=\"line\">            onFulfilled,</span><br><span class=\"line\">            onRejected</span><br><span class=\"line\">        &#125; = callback;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"built_in\">Promise</span>.pending) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.callbacks.push(callback);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// if (this.status === Promise.onFulfilled &amp;&amp; onFulfilled) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     onFulfilled(this.value);</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"built_in\">Promise</span>.onFulfilled) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 没有传入 onFulfilled（回调事件） new Pronise() 没有调用 resolve() 将undefined 传入</span></span><br><span class=\"line\">            <span class=\"comment\">// const nextValue = onFulfilled ? onFulfilled(this.value) : undefined;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 传入存储的值</span></span><br><span class=\"line\">            <span class=\"comment\">// 未传入onFulfilled时，value传入</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> nextValue = onFulfilled ? onFulfilled(<span class=\"built_in\">this</span>.value) : <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\"></span><br><span class=\"line\">            nextResolve(nextValue)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// if (this.status === Promise.onRejected &amp;&amp; onRejected) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     onRejected(this.reason);</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"built_in\">Promise</span>.onRejected) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// const nextReason = onRejected ? onRejected(this.reason) : undefined;</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> nextReason = onRejected ? onRejected(<span class=\"built_in\">this</span>.reason) : <span class=\"built_in\">this</span>.reason;</span><br><span class=\"line\"></span><br><span class=\"line\">            nextReject(nextReason)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里可以理解为在注册事件</span></span><br><span class=\"line\">        <span class=\"comment\">// 也就是将需要执行的回调函数存储起来</span></span><br><span class=\"line\">        <span class=\"comment\">// this.callbacks.push(&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     onFulfilled,</span></span><br><span class=\"line\">        <span class=\"comment\">//     onRejected</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">        <span class=\"comment\">// !!!!这里之所以把下一个Promsie的resolve函数和reject函数也存在callback中</span></span><br><span class=\"line\">        <span class=\"comment\">// !!!!是为了将onFulfilled的执行结果通过nextResolve传入到下一个Promise作为它的value值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">nextResolve, nextReject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.playHandler(&#123;</span><br><span class=\"line\">                nextResolve,</span><br><span class=\"line\">                nextReject,</span><br><span class=\"line\">                onFulfilled,</span><br><span class=\"line\">                onRejected</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> success = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// let success = true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">&#x27;一次resolve&#x27;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            reject(<span class=\"string\">&#x27;一次错误error&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data, <span class=\"string\">&#x27;data&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                resolve(data + <span class=\"string\">&#x27;resolve()调用新的Promise&#x27;</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// return &#x27;二次调用then&#x27;;</span></span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error, <span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;then-&gt; err&#x27;</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data, <span class=\"string\">&#x27;链式调用then&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error + <span class=\"string\">&#x27;  链式调用reject()&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// then的第二个参数执行reject返回值</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * .then(()=&gt;&#123;&#125;,()=&gt;&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>"},{"title":"promise 的方法","toc":true,"_content":"<a href = '#catch'>.catch()</a>\n<a href = '#resolve'>.resolve()</a>\n<a href = '#reject'>.reject()</a>\n<a href = '#finally'>.finally()</a>\n<a href = '#all'>.all()</a>\n<a href = '#race'>.race()</a>\n<a href = '#any'>.any()</a>\n\n\n<!-- more -->\n\n<div id = 'catch'></div>\n\n##\n* ## .catch() 方法实现\n* 实际上是 .then的语法糖\n\n```js\nPromise.prototype.catch = function(callback) {\n    return this.then(null, callback);\n}\n\n```\n\n\n<div id = 'resolve'></div>\n\n##\n* ## Promise.resolve() 实际上调用的是 new Promise()；并且调用 resolve();\n* 生成一个成功的promise\n\n```js\n/**\n * \n * @param {*} value value !== 'object' value !== 'function'\n */\nPromise.resolve1 = function(value) {\n    return new Promise(resolve => {\n        resolve(value);\n    })\n}\nPromise.resolve1(1).then(res => {\n    console.log(res, 'Promise.resolve1()')\n})\n\n/**\n * \n * @param {*} value value === 'object' value === 'function'\n * value 是一个Promise的实例\n */\nPromise.resolve2 = function(value) {\n    // instanceof 检测符用于 检测构造函数的prototype属性是否出现在某个实例对象的原型上\n    if (value instanceof Promise) return value;\n    if (value === null) return null;\n    if (typeof value === 'object' || typeof value === 'function') {\n        // value 是不是一个Promise()是否有then方法\n        try {\n            // 这段语句中有任何错误都会执行catch\n            let then = value.then;\n            if (typeof then === 'function') {\n                return new Promise(then.call(value)); // 执行value方法\n            }\n        } catch (error) {\n            return new Promise((resolve, reject) => {\n                reject(error);\n            })\n        }\n    }\n    return value;\n}\n\n// 参数不是 promise的实例\nconsole.log(Promise.resolve2(2), 'Promise.resolve2()')\n\n// 参数是 promise的实例\nPromise.resolve2(new Promise(resolve => { resolve(33) })).then(val => {\n    console.log(val, 'Promise.resolve2() val3')\n})\n```\n\n<div id = 'reject'></div>\n\n##\n * ## Promise.reject() 实际上调用的是 new Promise()；并且调用 reject();\n * 生成一个失败的promise\n ```js\nPromise.reject = function(reason) {\n    return new Promise((resolve, reject) => {\n        reject(reason);\n    })\n}\nconsole.log(Promise.reject('error'));\nPromise.reject('error').catch(res => {\n    console.log(res, 'Promise.catch()')\n})\n```\n<div id = 'finally'></div>\n\n##\n * ## Promise.finally() 无论成功或者失败都会执行\n * 返回 Promise()\n\n ```js\n// this.then(() =>{}, () =>{}).finally(callback);  ....callback(); callback有可能返回一个 promise\nPromise.prototype.finally = function(callback) {\n    return this.then(value => {\n            // callback(); return value；也可能return new Promise();\n            // Promise.resolve1() 会等callback() 执行完毕\n            return Promise.resolve1(callback()).then(() => value);\n        },\n        err => {\n            // 错误信息向下传递\n            return Promise.resolve1(callback()).then(() => {\n                throw err;\n            });\n        }\n    )\n};\n```\n<div id = 'all'></div>\n\n##\n * ## Promise.all()\n * all()接受一个成员为promise实例的数组 依次执行，按顺序返回结果\n * 所有的执行成功进入成功态，失败一个进入失败状态\n\n ```js\nPromise.all = function(arr) {\n    return new Promise((resolve, reject) => {\n        let endAnswer = [];\n        let count = 0;\n        for (let i = 0; i < arr.length; i++) {\n            let oncePro = arr[i];\n            oncePro.then(function(val) {\n                endAnswer[i] = val;\n                count++;\n                if (count === arr.length) {\n                    resolve(endAnswer)\n                }\n            }, reject);\n        }\n    })\n}\nlet promise1 = new Promise(function(resolve) {\n    resolve(1);\n});\nlet promise2 = new Promise(function(resolve) {\n    resolve(2);\n});\nlet promise3 = new Promise(function(resolve) {\n    resolve(3);\n});\n\nlet promiseAll = Promise.all([promise1, promise2, promise3]);\npromiseAll.then(function(res) {\n    console.log(res, 'promise.all()');\n});\n// [1, 2, 3] \"promise.all()\"\n```\n<div id = 'race'></div>\n\n##\n * ## Promise.race()\n * race()接受一个成员为primise实例的数组，\n * 一个成功就成功，一个失败就失败\n\n```js\nPromise.race = function(arr) {\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < arr.length; i++) {\n            arr[i].then(resolve, reject);\n        }\n    })\n}\n```\n<div id = 'any'></div>\n\n##\n * ## any()\n\n * 如果传入的参数是一个空的可迭代对象，则返回一个 已失败（already rejected） 状态的 Promise。\n * 如果传入的参数不包含任何 promise，则返回一个 异步完成 （asynchronously resolved）的 Promise。\n * 其他情况下都会返回一个处理中（pending） 的 Promise。 \n *      只要传入的迭代对象中的任何一个 promise 变成成功（resolve）状态，或者其中的所有的 promises 都失败，\n *      那么返回的 promise 就会 异步地（当调用栈为空时） 变成成功/失败（resolved/reject）状态。\n","source":"_posts/Promise/PromiseMethosd.md","raw":"---\ntitle: promise 的方法\ntag: promise\ntoc: true\n---\n<a href = '#catch'>.catch()</a>\n<a href = '#resolve'>.resolve()</a>\n<a href = '#reject'>.reject()</a>\n<a href = '#finally'>.finally()</a>\n<a href = '#all'>.all()</a>\n<a href = '#race'>.race()</a>\n<a href = '#any'>.any()</a>\n\n\n<!-- more -->\n\n<div id = 'catch'></div>\n\n##\n* ## .catch() 方法实现\n* 实际上是 .then的语法糖\n\n```js\nPromise.prototype.catch = function(callback) {\n    return this.then(null, callback);\n}\n\n```\n\n\n<div id = 'resolve'></div>\n\n##\n* ## Promise.resolve() 实际上调用的是 new Promise()；并且调用 resolve();\n* 生成一个成功的promise\n\n```js\n/**\n * \n * @param {*} value value !== 'object' value !== 'function'\n */\nPromise.resolve1 = function(value) {\n    return new Promise(resolve => {\n        resolve(value);\n    })\n}\nPromise.resolve1(1).then(res => {\n    console.log(res, 'Promise.resolve1()')\n})\n\n/**\n * \n * @param {*} value value === 'object' value === 'function'\n * value 是一个Promise的实例\n */\nPromise.resolve2 = function(value) {\n    // instanceof 检测符用于 检测构造函数的prototype属性是否出现在某个实例对象的原型上\n    if (value instanceof Promise) return value;\n    if (value === null) return null;\n    if (typeof value === 'object' || typeof value === 'function') {\n        // value 是不是一个Promise()是否有then方法\n        try {\n            // 这段语句中有任何错误都会执行catch\n            let then = value.then;\n            if (typeof then === 'function') {\n                return new Promise(then.call(value)); // 执行value方法\n            }\n        } catch (error) {\n            return new Promise((resolve, reject) => {\n                reject(error);\n            })\n        }\n    }\n    return value;\n}\n\n// 参数不是 promise的实例\nconsole.log(Promise.resolve2(2), 'Promise.resolve2()')\n\n// 参数是 promise的实例\nPromise.resolve2(new Promise(resolve => { resolve(33) })).then(val => {\n    console.log(val, 'Promise.resolve2() val3')\n})\n```\n\n<div id = 'reject'></div>\n\n##\n * ## Promise.reject() 实际上调用的是 new Promise()；并且调用 reject();\n * 生成一个失败的promise\n ```js\nPromise.reject = function(reason) {\n    return new Promise((resolve, reject) => {\n        reject(reason);\n    })\n}\nconsole.log(Promise.reject('error'));\nPromise.reject('error').catch(res => {\n    console.log(res, 'Promise.catch()')\n})\n```\n<div id = 'finally'></div>\n\n##\n * ## Promise.finally() 无论成功或者失败都会执行\n * 返回 Promise()\n\n ```js\n// this.then(() =>{}, () =>{}).finally(callback);  ....callback(); callback有可能返回一个 promise\nPromise.prototype.finally = function(callback) {\n    return this.then(value => {\n            // callback(); return value；也可能return new Promise();\n            // Promise.resolve1() 会等callback() 执行完毕\n            return Promise.resolve1(callback()).then(() => value);\n        },\n        err => {\n            // 错误信息向下传递\n            return Promise.resolve1(callback()).then(() => {\n                throw err;\n            });\n        }\n    )\n};\n```\n<div id = 'all'></div>\n\n##\n * ## Promise.all()\n * all()接受一个成员为promise实例的数组 依次执行，按顺序返回结果\n * 所有的执行成功进入成功态，失败一个进入失败状态\n\n ```js\nPromise.all = function(arr) {\n    return new Promise((resolve, reject) => {\n        let endAnswer = [];\n        let count = 0;\n        for (let i = 0; i < arr.length; i++) {\n            let oncePro = arr[i];\n            oncePro.then(function(val) {\n                endAnswer[i] = val;\n                count++;\n                if (count === arr.length) {\n                    resolve(endAnswer)\n                }\n            }, reject);\n        }\n    })\n}\nlet promise1 = new Promise(function(resolve) {\n    resolve(1);\n});\nlet promise2 = new Promise(function(resolve) {\n    resolve(2);\n});\nlet promise3 = new Promise(function(resolve) {\n    resolve(3);\n});\n\nlet promiseAll = Promise.all([promise1, promise2, promise3]);\npromiseAll.then(function(res) {\n    console.log(res, 'promise.all()');\n});\n// [1, 2, 3] \"promise.all()\"\n```\n<div id = 'race'></div>\n\n##\n * ## Promise.race()\n * race()接受一个成员为primise实例的数组，\n * 一个成功就成功，一个失败就失败\n\n```js\nPromise.race = function(arr) {\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < arr.length; i++) {\n            arr[i].then(resolve, reject);\n        }\n    })\n}\n```\n<div id = 'any'></div>\n\n##\n * ## any()\n\n * 如果传入的参数是一个空的可迭代对象，则返回一个 已失败（already rejected） 状态的 Promise。\n * 如果传入的参数不包含任何 promise，则返回一个 异步完成 （asynchronously resolved）的 Promise。\n * 其他情况下都会返回一个处理中（pending） 的 Promise。 \n *      只要传入的迭代对象中的任何一个 promise 变成成功（resolve）状态，或者其中的所有的 promises 都失败，\n *      那么返回的 promise 就会 异步地（当调用栈为空时） 变成成功/失败（resolved/reject）状态。\n","slug":"Promise/PromiseMethosd","published":1,"date":"2021-03-06T15:10:16.387Z","updated":"2021-03-08T12:13:25.232Z","_id":"cklxv6rtm0000dt9kbpwof3dr","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href = '#catch'>.catch()</a><br><a href = '#resolve'>.resolve()</a><br><a href = '#reject'>.reject()</a><br><a href = '#finally'>.finally()</a><br><a href = '#all'>.all()</a><br><a href = '#race'>.race()</a><br><a href = '#any'>.any()</a></p>\n<a id=\"more\"></a>\n\n<div id = 'catch'></div>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"catch-方法实现\"><a href=\"#catch-方法实现\" class=\"headerlink\" title=\".catch() 方法实现\"></a>.catch() 方法实现</h2></li>\n<li>实际上是 .then的语法糖</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"literal\">null</span>, callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<div id = 'resolve'></div>\n\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"Promise-resolve-实际上调用的是-new-Promise-；并且调用-resolve\"><a href=\"#Promise-resolve-实际上调用的是-new-Promise-；并且调用-resolve\" class=\"headerlink\" title=\"Promise.resolve() 实际上调用的是 new Promise()；并且调用 resolve();\"></a>Promise.resolve() 实际上调用的是 new Promise()；并且调用 resolve();</h2></li>\n<li>生成一个成功的promise</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>value value !== &#x27;object&#x27; value !== &#x27;function&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(value);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve1(<span class=\"number\">1</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res, <span class=\"string\">&#x27;Promise.resolve1()&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>value value === &#x27;object&#x27; value === &#x27;function&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"> * value 是一个Promise的实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// instanceof 检测符用于 检测构造函数的prototype属性是否出现在某个实例对象的原型上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;object&#x27;</span> || <span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// value 是不是一个Promise()是否有then方法</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这段语句中有任何错误都会执行catch</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> then = value.then;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(then.call(value)); <span class=\"comment\">// 执行value方法</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                reject(error);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数不是 promise的实例</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Promise</span>.resolve2(<span class=\"number\">2</span>), <span class=\"string\">&#x27;Promise.resolve2()&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是 promise的实例</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve2(<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123; resolve(<span class=\"number\">33</span>) &#125;)).then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val, <span class=\"string\">&#x27;Promise.resolve2() val3&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<div id = 'reject'></div>\n\n<h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"Promise-reject-实际上调用的是-new-Promise-；并且调用-reject\"><a href=\"#Promise-reject-实际上调用的是-new-Promise-；并且调用-reject\" class=\"headerlink\" title=\"Promise.reject() 实际上调用的是 new Promise()；并且调用 reject();\"></a>Promise.reject() 实际上调用的是 new Promise()；并且调用 reject();</h2></li>\n<li>生成一个失败的promise<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        reject(reason);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Promise</span>.reject(<span class=\"string\">&#x27;error&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"string\">&#x27;error&#x27;</span>).catch(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res, <span class=\"string\">&#x27;Promise.catch()&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<div id = 'finally'></div>\n\n</li>\n</ul>\n<h2 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"Promise-finally-无论成功或者失败都会执行\"><a href=\"#Promise-finally-无论成功或者失败都会执行\" class=\"headerlink\" title=\"Promise.finally() 无论成功或者失败都会执行\"></a>Promise.finally() 无论成功或者失败都会执行</h2></li>\n<li><p>返回 Promise()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this.then(() =&gt;&#123;&#125;, () =&gt;&#123;&#125;).finally(callback);  ....callback(); callback有可能返回一个 promise</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// callback(); return value；也可能return new Promise();</span></span><br><span class=\"line\">            <span class=\"comment\">// Promise.resolve1() 会等callback() 执行完毕</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve1(callback()).then(<span class=\"function\">() =&gt;</span> value);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        err =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 错误信息向下传递</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve1(callback()).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div id = 'all'></div>\n\n</li>\n</ul>\n<h2 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2></li>\n<li><p>all()接受一个成员为promise实例的数组 依次执行，按顺序返回结果</p>\n</li>\n<li><p>所有的执行成功进入成功态，失败一个进入失败状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> endAnswer = [];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> oncePro = arr[i];</span><br><span class=\"line\">            oncePro.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">                endAnswer[i] = val;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (count === arr.length) &#123;</span><br><span class=\"line\">                    resolve(endAnswer)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, reject);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> promiseAll = <span class=\"built_in\">Promise</span>.all([promise1, promise2, promise3]);</span><br><span class=\"line\">promiseAll.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res, <span class=\"string\">&#x27;promise.all()&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3] &quot;promise.all()&quot;</span></span><br></pre></td></tr></table></figure>\n<div id = 'race'></div>\n\n</li>\n</ul>\n<h2 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h2></li>\n<li>race()接受一个成员为primise实例的数组，</li>\n<li>一个成功就成功，一个失败就失败</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            arr[i].then(resolve, reject);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div id = 'any'></div>\n\n<h2 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any()\"></a>any()</h2></li>\n<li><p>如果传入的参数是一个空的可迭代对象，则返回一个 已失败（already rejected） 状态的 Promise。</p>\n</li>\n<li><p>如果传入的参数不包含任何 promise，则返回一个 异步完成 （asynchronously resolved）的 Promise。</p>\n</li>\n<li><p>其他情况下都会返回一个处理中（pending） 的 Promise。 </p>\n</li>\n<li><pre><code> 只要传入的迭代对象中的任何一个 promise 变成成功（resolve）状态，或者其中的所有的 promises 都失败，</code></pre>\n</li>\n<li><pre><code> 那么返回的 promise 就会 异步地（当调用栈为空时） 变成成功/失败（resolved/reject）状态。</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href = '#catch'>.catch()</a><br><a href = '#resolve'>.resolve()</a><br><a href = '#reject'>.reject()</a><br><a href = '#finally'>.finally()</a><br><a href = '#all'>.all()</a><br><a href = '#race'>.race()</a><br><a href = '#any'>.any()</a></p>","more":"<div id = 'catch'></div>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"catch-方法实现\"><a href=\"#catch-方法实现\" class=\"headerlink\" title=\".catch() 方法实现\"></a>.catch() 方法实现</h2></li>\n<li>实际上是 .then的语法糖</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"literal\">null</span>, callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<div id = 'resolve'></div>\n\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"Promise-resolve-实际上调用的是-new-Promise-；并且调用-resolve\"><a href=\"#Promise-resolve-实际上调用的是-new-Promise-；并且调用-resolve\" class=\"headerlink\" title=\"Promise.resolve() 实际上调用的是 new Promise()；并且调用 resolve();\"></a>Promise.resolve() 实际上调用的是 new Promise()；并且调用 resolve();</h2></li>\n<li>生成一个成功的promise</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>value value !== &#x27;object&#x27; value !== &#x27;function&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(value);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve1(<span class=\"number\">1</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res, <span class=\"string\">&#x27;Promise.resolve1()&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>value value === &#x27;object&#x27; value === &#x27;function&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"> * value 是一个Promise的实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// instanceof 检测符用于 检测构造函数的prototype属性是否出现在某个实例对象的原型上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;object&#x27;</span> || <span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// value 是不是一个Promise()是否有then方法</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这段语句中有任何错误都会执行catch</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> then = value.then;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(then.call(value)); <span class=\"comment\">// 执行value方法</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                reject(error);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数不是 promise的实例</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Promise</span>.resolve2(<span class=\"number\">2</span>), <span class=\"string\">&#x27;Promise.resolve2()&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是 promise的实例</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve2(<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123; resolve(<span class=\"number\">33</span>) &#125;)).then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val, <span class=\"string\">&#x27;Promise.resolve2() val3&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<div id = 'reject'></div>\n\n<h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"Promise-reject-实际上调用的是-new-Promise-；并且调用-reject\"><a href=\"#Promise-reject-实际上调用的是-new-Promise-；并且调用-reject\" class=\"headerlink\" title=\"Promise.reject() 实际上调用的是 new Promise()；并且调用 reject();\"></a>Promise.reject() 实际上调用的是 new Promise()；并且调用 reject();</h2></li>\n<li>生成一个失败的promise<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        reject(reason);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Promise</span>.reject(<span class=\"string\">&#x27;error&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"string\">&#x27;error&#x27;</span>).catch(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res, <span class=\"string\">&#x27;Promise.catch()&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<div id = 'finally'></div>\n\n</li>\n</ul>\n<h2 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"Promise-finally-无论成功或者失败都会执行\"><a href=\"#Promise-finally-无论成功或者失败都会执行\" class=\"headerlink\" title=\"Promise.finally() 无论成功或者失败都会执行\"></a>Promise.finally() 无论成功或者失败都会执行</h2></li>\n<li><p>返回 Promise()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this.then(() =&gt;&#123;&#125;, () =&gt;&#123;&#125;).finally(callback);  ....callback(); callback有可能返回一个 promise</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// callback(); return value；也可能return new Promise();</span></span><br><span class=\"line\">            <span class=\"comment\">// Promise.resolve1() 会等callback() 执行完毕</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve1(callback()).then(<span class=\"function\">() =&gt;</span> value);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        err =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 错误信息向下传递</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve1(callback()).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div id = 'all'></div>\n\n</li>\n</ul>\n<h2 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2></li>\n<li><p>all()接受一个成员为promise实例的数组 依次执行，按顺序返回结果</p>\n</li>\n<li><p>所有的执行成功进入成功态，失败一个进入失败状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> endAnswer = [];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> oncePro = arr[i];</span><br><span class=\"line\">            oncePro.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">                endAnswer[i] = val;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (count === arr.length) &#123;</span><br><span class=\"line\">                    resolve(endAnswer)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, reject);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> promiseAll = <span class=\"built_in\">Promise</span>.all([promise1, promise2, promise3]);</span><br><span class=\"line\">promiseAll.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res, <span class=\"string\">&#x27;promise.all()&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3] &quot;promise.all()&quot;</span></span><br></pre></td></tr></table></figure>\n<div id = 'race'></div>\n\n</li>\n</ul>\n<h2 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h2></li>\n<li>race()接受一个成员为primise实例的数组，</li>\n<li>一个成功就成功，一个失败就失败</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            arr[i].then(resolve, reject);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div id = 'any'></div>\n\n<h2 id=\"-6\"><a href=\"#-6\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><h2 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any()\"></a>any()</h2></li>\n<li><p>如果传入的参数是一个空的可迭代对象，则返回一个 已失败（already rejected） 状态的 Promise。</p>\n</li>\n<li><p>如果传入的参数不包含任何 promise，则返回一个 异步完成 （asynchronously resolved）的 Promise。</p>\n</li>\n<li><p>其他情况下都会返回一个处理中（pending） 的 Promise。 </p>\n</li>\n<li><pre><code> 只要传入的迭代对象中的任何一个 promise 变成成功（resolve）状态，或者其中的所有的 promises 都失败，</code></pre>\n</li>\n<li><pre><code> 那么返回的 promise 就会 异步地（当调用栈为空时） 变成成功/失败（resolved/reject）状态。</code></pre>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cklj7scxu0004bg9kbmti2rrg","tag_id":"cklj7vhvo0005bg9k2gijgzxe","_id":"cklj7wo4n0007bg9k4nq2dnd9"},{"post_id":"cklj7qey40002bg9k44p18aiw","tag_id":"cklj7wyha0008bg9kashc03ic","_id":"cklj7wyhb0009bg9kfpv10zmc"},{"post_id":"cklj82zt2000bbg9k2i5ye1yj","tag_id":"cklj7vhvo0005bg9k2gijgzxe","_id":"cklj82zt3000cbg9k4p7jd57a"},{"post_id":"cklun5rcq0000k89k8d7p9bu1","tag_id":"cklun5rd00002k89ke2ym70f4","_id":"cklun5rd30003k89kf1x244ew"},{"post_id":"cklxv6rtm0000dt9kbpwof3dr","tag_id":"cklun5rd00002k89ke2ym70f4","_id":"cklxv6rtv0001dt9k7onk6tw8"}],"Tag":[{"name":"hexo","_id":"cklj7vhvo0005bg9k2gijgzxe"},{"name":"js","_id":"cklj7wyha0008bg9kashc03ic"},{"name":"promise","_id":"cklun5rd00002k89ke2ym70f4"}]}}